
002FreeRTOS_Notification_From_ISR3_SEGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000144e4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144f8  200144f8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014c00  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000300b  00000000  00000000  00034c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001398  00000000  00000000  00037c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f10  00000000  00000000  00039030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002369a  00000000  00000000  00039f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000154d2  00000000  00000000  0005d5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7f74  00000000  00000000  00072aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005218  00000000  00000000  0014aa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b7  00000000  00000000  0014fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b10 	.word	0x08006b10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006b10 	.word	0x08006b10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f24 	.word	0x20012f24

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fbe7 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f87d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f91b 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000572:	f000 f8e3 	bl	800073c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  //Enable Cycle Counting for SEGGER
   volatile uint32_t *pDWT_CTRL = (uint32_t*)0xE0001000;
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <main+0xd8>)
 8000578:	617b      	str	r3, [r7, #20]
  (*pDWT_CTRL) |= (1 << 0);
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f043 0201 	orr.w	r2, r3, #1
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	601a      	str	r2, [r3, #0]


    SEGGER_SYSVIEW_Conf();
 8000586:	f004 fc23 	bl	8004dd0 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 800058a:	f005 fd01 	bl	8005f90 <SEGGER_SYSVIEW_Start>


    HAL_TIM_Base_Start_IT(&htim7);
 800058e:	482b      	ldr	r0, [pc, #172]	; (800063c <main+0xdc>)
 8000590:	f001 fbf0 	bl	8001d74 <HAL_TIM_Base_Start_IT>


  xtaskCreateStatus = xTaskCreate(taskLED_Green, "taskLED_Green", 200, NULL, 2, &taskLED_Green_Handle);
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <main+0xe0>)
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4928      	ldr	r1, [pc, #160]	; (8000644 <main+0xe4>)
 80005a2:	4829      	ldr	r0, [pc, #164]	; (8000648 <main+0xe8>)
 80005a4:	f002 fa8e 	bl	8002ac4 <xTaskCreate>
 80005a8:	6138      	str	r0, [r7, #16]
  configASSERT(xtaskCreateStatus == pdPASS);
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x64>

  taskHAndleToBeDeleted = taskLED_Green_Handle; //do assignment after task have beeen created
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0xe0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a20      	ldr	r2, [pc, #128]	; (800064c <main+0xec>)
 80005cc:	6013      	str	r3, [r2, #0]

  xtaskCreateStatus = xTaskCreate(taskLED_RED, "taskLED_RED", 200, NULL, 3, &taskLED_Red_Handle);
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0xf0>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2303      	movs	r3, #3
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	491e      	ldr	r1, [pc, #120]	; (8000654 <main+0xf4>)
 80005dc:	481e      	ldr	r0, [pc, #120]	; (8000658 <main+0xf8>)
 80005de:	f002 fa71 	bl	8002ac4 <xTaskCreate>
 80005e2:	6138      	str	r0, [r7, #16]
  configASSERT(xtaskCreateStatus == pdPASS);
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d00a      	beq.n	8000600 <main+0xa0>
        __asm volatile
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	60bb      	str	r3, [r7, #8]
    }
 80005fc:	bf00      	nop
 80005fe:	e7fe      	b.n	80005fe <main+0x9e>

  xtaskCreateStatus = xTaskCreate(taskLED_Blue, "taskLED_Blue", 200, NULL, 4, &taskLED_Blue_Handle);
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0xfc>)
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2304      	movs	r3, #4
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	4914      	ldr	r1, [pc, #80]	; (8000660 <main+0x100>)
 800060e:	4815      	ldr	r0, [pc, #84]	; (8000664 <main+0x104>)
 8000610:	f002 fa58 	bl	8002ac4 <xTaskCreate>
 8000614:	6138      	str	r0, [r7, #16]
  configASSERT(xtaskCreateStatus == pdPASS);
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d00a      	beq.n	8000632 <main+0xd2>
        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	607b      	str	r3, [r7, #4]
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <main+0xd0>



  //Start the scheduler
  vTaskStartScheduler();
 8000632:	f002 fc7d 	bl	8002f30 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0xd6>
 8000638:	e0001000 	.word	0xe0001000
 800063c:	20000030 	.word	0x20000030
 8000640:	20000078 	.word	0x20000078
 8000644:	08006b28 	.word	0x08006b28
 8000648:	08000961 	.word	0x08000961
 800064c:	20000084 	.word	0x20000084
 8000650:	2000007c 	.word	0x2000007c
 8000654:	08006b38 	.word	0x08006b38
 8000658:	080009bd 	.word	0x080009bd
 800065c:	20000080 	.word	0x20000080
 8000660:	08006b44 	.word	0x08006b44
 8000664:	08000a19 	.word	0x08000a19

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fa10 	bl	8006a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006dc:	23a8      	movs	r3, #168	; 0xa8
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe3b 	bl	8001368 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 f9e4 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2105      	movs	r1, #5
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f89c 	bl	8001858 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 f9cd 	bl	8000ac4 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM7_Init+0x64>)
 800074c:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_TIM7_Init+0x68>)
 800074e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_TIM7_Init+0x64>)
 8000752:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000756:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_TIM7_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_TIM7_Init+0x64>)
 8000760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000764:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_TIM7_Init+0x64>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM7_Init+0x64>)
 800076e:	f001 fab1 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000778:	f000 f9a4 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM7_Init+0x64>)
 800078a:	f001 fd27 	bl	80021dc <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f996 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000030 	.word	0x20000030
 80007a4:	40001400 	.word	0x40001400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a46      	ldr	r2, [pc, #280]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3f      	ldr	r2, [pc, #252]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <MX_GPIO_Init+0x138>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a38      	ldr	r2, [pc, #224]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <MX_GPIO_Init+0x138>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_GPIO_Init+0x138>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000850:	4824      	ldr	r0, [pc, #144]	; (80008e4 <MX_GPIO_Init+0x13c>)
 8000852:	f000 fd31 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	481d      	ldr	r0, [pc, #116]	; (80008e8 <MX_GPIO_Init+0x140>)
 8000872:	f000 fb85 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4818      	ldr	r0, [pc, #96]	; (80008ec <MX_GPIO_Init+0x144>)
 800088c:	f000 fb78 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000890:	2304      	movs	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_GPIO_Init+0x148>)
 80008a4:	f000 fb6c 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80008a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x13c>)
 80008c2:	f000 fb5d 	bl	8000f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2106      	movs	r1, #6
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 fb2e 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f000 fb47 	bl	8000f64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400

080008f4 <Button_INterrupt_Handler>:

/* USER CODE BEGIN 4 */


void Button_INterrupt_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af02      	add	r7, sp, #8
	if(!isButtonPressProcessed){
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <Button_INterrupt_Handler+0x5c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d122      	bne.n	8000948 <Button_INterrupt_Handler+0x54>
		traceISR_ENTER();
 8000902:	f005 fe0d 	bl	8006520 <SEGGER_SYSVIEW_RecordEnterISR>

		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
		xTaskNotifyFromISR(taskHAndleToBeDeleted,0,eNoAction,&pxHigherPriorityTaskWoken);
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <Button_INterrupt_Handler+0x60>)
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	f003 f934 	bl	8003b88 <xTaskGenericNotifyFromISR>


		isButtonPressProcessed = 1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <Button_INterrupt_Handler+0x5c>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]

		//Reset timer counter
		__HAL_TIM_SET_COUNTER(&htim7,0);
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <Button_INterrupt_Handler+0x64>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24


		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d007      	beq.n	8000944 <Button_INterrupt_Handler+0x50>
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <Button_INterrupt_Handler+0x68>)
 8000936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	f3bf 8f6f 	isb	sy
		traceISR_EXIT();
 8000944:	f005 fe2e 	bl	80065a4 <SEGGER_SYSVIEW_RecordExitISR>
	}
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000088 	.word	0x20000088
 8000954:	20000084 	.word	0x20000084
 8000958:	20000030 	.word	0x20000030
 800095c:	e000ed04 	.word	0xe000ed04

08000960 <taskLED_Green>:




static void taskLED_Green(void *paramters)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	4810      	ldr	r0, [pc, #64]	; (80009b0 <taskLED_Green+0x50>)
 800096e:	f000 fcbc 	bl	80012ea <HAL_GPIO_TogglePin>
		 status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000972:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2300      	movs	r3, #0
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f003 f87a 	bl	8003a78 <xTaskGenericNotifyWait>
 8000984:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1ed      	bne.n	8000968 <taskLED_Green+0x8>
			//Delete the task
			portENTER_CRITICAL();
 800098c:	f003 ff1a 	bl	80047c4 <vPortEnterCritical>
			taskHAndleToBeDeleted = taskLED_Red_Handle;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <taskLED_Green+0x54>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <taskLED_Green+0x58>)
 8000996:	6013      	str	r3, [r2, #0]

			//TURN OFF THE LED
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <taskLED_Green+0x50>)
 80009a0:	f000 fc8a 	bl	80012b8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80009a4:	f003 ff3e 	bl	8004824 <vPortExitCritical>
			vTaskDelete(NULL);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f002 fa13 	bl	8002dd4 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ae:	e7db      	b.n	8000968 <taskLED_Green+0x8>
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	2000007c 	.word	0x2000007c
 80009b8:	20000084 	.word	0x20000084

080009bc <taskLED_RED>:
	}
}


static void taskLED_RED(void *paramters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c8:	4810      	ldr	r0, [pc, #64]	; (8000a0c <taskLED_RED+0x50>)
 80009ca:	f000 fc8e 	bl	80012ea <HAL_GPIO_TogglePin>
		 status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80009ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f003 f84c 	bl	8003a78 <xTaskGenericNotifyWait>
 80009e0:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d1ed      	bne.n	80009c4 <taskLED_RED+0x8>
			//Delete the task
			portENTER_CRITICAL();
 80009e8:	f003 feec 	bl	80047c4 <vPortEnterCritical>
			taskHAndleToBeDeleted = taskLED_Blue_Handle;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <taskLED_RED+0x54>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <taskLED_RED+0x58>)
 80009f2:	6013      	str	r3, [r2, #0]

			//TURN OFF THE LED
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 ,RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <taskLED_RED+0x50>)
 80009fc:	f000 fc5c 	bl	80012b8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a00:	f003 ff10 	bl	8004824 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f002 f9e5 	bl	8002dd4 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a0a:	e7db      	b.n	80009c4 <taskLED_RED+0x8>
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	20000080 	.word	0x20000080
 8000a14:	20000084 	.word	0x20000084

08000a18 <taskLED_Blue>:
}



static void taskLED_Blue(void *paramters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	480f      	ldr	r0, [pc, #60]	; (8000a64 <taskLED_Blue+0x4c>)
 8000a26:	f000 fc60 	bl	80012ea <HAL_GPIO_TogglePin>
		 status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(200));
 8000a2a:	23c8      	movs	r3, #200	; 0xc8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2000      	movs	r0, #0
 8000a36:	f003 f81f 	bl	8003a78 <xTaskGenericNotifyWait>
 8000a3a:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d1ee      	bne.n	8000a20 <taskLED_Blue+0x8>
			//Delete the task
			portENTER_CRITICAL();
 8000a42:	f003 febf 	bl	80047c4 <vPortEnterCritical>
			taskHAndleToBeDeleted = NULL;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <taskLED_Blue+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]

			//TURN OFF THE LED
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 ,RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <taskLED_Blue+0x4c>)
 8000a54:	f000 fc30 	bl	80012b8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a58:	f003 fee4 	bl	8004824 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f002 f9b9 	bl	8002dd4 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a62:	e7dd      	b.n	8000a20 <taskLED_Blue+0x8>
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	20000084 	.word	0x20000084

08000a6c <vApplicationIdleHook>:
/* Declare a variable that will be incremented by the hook function. */
volatile uint32_t ulIdleCycleCount = 0UL;
/* Idle hook functions MUST be called vApplicationIdleHook(), take no parameters,
and return void. */
void vApplicationIdleHook( void )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	/* This hook function does nothing but increment a counter. */
	ulIdleCycleCount++;
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <vApplicationIdleHook+0x18>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <vApplicationIdleHook+0x18>)
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	2000008c 	.word	0x2000008c

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f96f 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //TIM gives interrupt 100 ms after starting
  	if(htim->Instance == TIM7){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d102      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x26>
  		isButtonPressProcessed = 0; //Clear flag to take next button prress
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  	}
  /* USER CODE END Callback 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40014400 	.word	0x40014400
 8000abc:	40001400 	.word	0x40001400
 8000ac0:	20000088 	.word	0x20000088

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b0e:	f003 fddb 	bl	80046c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d115      	bne.n	8000b5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_TIM_Base_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_TIM_Base_MspInit+0x4c>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_Base_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2037      	movs	r0, #55	; 0x37
 8000b54:	f000 f9ea 	bl	8000f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b58:	2037      	movs	r0, #55	; 0x37
 8000b5a:	f000 fa03 	bl	8000f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40001400 	.word	0x40001400
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_InitTick+0xd4>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <HAL_InitTick+0xd4>)
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_InitTick+0xd4>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f862 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bac:	f001 f84c 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9b      	lsrs	r3, r3, #18
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_InitTick+0xe0>)
 8000bc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_InitTick+0xdc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_InitTick+0xdc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bec:	f001 f872 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d11b      	bne.n	8000c36 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000bfe:	4813      	ldr	r0, [pc, #76]	; (8000c4c <HAL_InitTick+0xdc>)
 8000c00:	f001 f8b8 	bl	8001d74 <HAL_TIM_Base_Start_IT>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d111      	bne.n	8000c36 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c12:	2019      	movs	r0, #25
 8000c14:	f000 f9a6 	bl	8000f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d808      	bhi.n	8000c30 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 f982 	bl	8000f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0xe4>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e002      	b.n	8000c36 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	20000090 	.word	0x20000090
 8000c50:	40014400 	.word	0x40014400
 8000c54:	20000004 	.word	0x20000004

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Button_INterrupt_Handler();
 8000c88:	f7ff fe34 	bl	80008f4 <Button_INterrupt_Handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f000 fb47 	bl	8001320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c9e:	f001 f8d9 	bl	8001e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000090 	.word	0x20000090

08000cac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM7_IRQHandler+0x10>)
 8000cb2:	f001 f8cf 	bl	8001e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000030 	.word	0x20000030

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f005 fecb 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc23 	bl	8000560 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d28:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8000d2c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d30:	200144f8 	.word	0x200144f8

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d8 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f7ff ff02 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff feb0 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	200000d8 	.word	0x200000d8

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200000d8 	.word	0x200000d8

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e16b      	b.n	8001274 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 815a 	bne.w	800126e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80b4 	beq.w	800126e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <HAL_GPIO_Init+0x30c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a5f      	ldr	r2, [pc, #380]	; (800128c <HAL_GPIO_Init+0x30c>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_GPIO_Init+0x30c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a5b      	ldr	r2, [pc, #364]	; (8001290 <HAL_GPIO_Init+0x310>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x314>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d02b      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_GPIO_Init+0x318>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x222>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x31c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x21e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x21a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x324>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x216>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x328>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x212>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x32c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x20e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_GPIO_Init+0x330>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x20a>
 8001186:	2307      	movs	r3, #7
 8001188:	e00e      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800118a:	2308      	movs	r3, #8
 800118c:	e00c      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800118e:	2306      	movs	r3, #6
 8001190:	e00a      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 8001192:	2305      	movs	r3, #5
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <HAL_GPIO_Init+0x310>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a32      	ldr	r2, [pc, #200]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f ae90 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40021c00 	.word	0x40021c00
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	041a      	lsls	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	041a      	lsls	r2, r3, #16
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43d9      	mvns	r1, r3
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	400b      	ands	r3, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f806 	bl	8001350 <HAL_GPIO_EXTI_Callback>
  }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e267      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	2b08      	cmp	r3, #8
 800139c:	d112      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e242      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6c      	ldr	r2, [pc, #432]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a68      	ldr	r2, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fcc0 	bl	8000da4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcbc 	bl	8000da4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e207      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fcac 	bl	8000da4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fca8 	bl	8000da4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1f3      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c7      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fc61 	bl	8000da4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc5d 	bl	8000da4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a8      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fc40 	bl	8000da4 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fc3c 	bl	8000da4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e187      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d036      	beq.n	80015c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d016      	beq.n	8001588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fc20 	bl	8000da4 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc1c 	bl	8000da4 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e167      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
 8001586:	e01b      	b.n	80015c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fc09 	bl	8000da4 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	e00e      	b.n	80015b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fc05 	bl	8000da4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d907      	bls.n	80015b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e150      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470000 	.word	0x42470000
 80015b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ea      	bne.n	8001596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8097 	beq.w	80016fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b74      	ldr	r3, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a73      	ldr	r2, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fbc5 	bl	8000da4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fbc1 	bl	8000da4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e10c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x2ea>
 8001644:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	e01c      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x30c>
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5b      	ldr	r2, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001674:	4b58      	ldr	r3, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0304 	bic.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fb86 	bl	8000da4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fb82 	bl	8000da4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0cb      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0ee      	beq.n	800169c <HAL_RCC_OscConfig+0x334>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fb70 	bl	8000da4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb6c 	bl	8000da4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e0b5      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ee      	bne.n	80016c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a38      	ldr	r2, [pc, #224]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a1 	beq.w	8001848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d05c      	beq.n	80017cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d141      	bne.n	800179e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fb40 	bl	8000da4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fb3c 	bl	8000da4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e087      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb15 	bl	8000da4 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fb11 	bl	8000da4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e05c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x416>
 800179c:	e054      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fafe 	bl	8000da4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fafa 	bl	8000da4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e045      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x444>
 80017ca:	e03d      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e038      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000
 80017e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4ec>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d028      	beq.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d121      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11a      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800181a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	4293      	cmp	r3, r2
 800181e:	d111      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0cc      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d90c      	bls.n	8001894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d044      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e067      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff fa2c 	bl	8000da4 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff fa28 	bl	8000da4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d20c      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f8b6 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08006c34 	.word	0x08006c34
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b094      	sub	sp, #80	; 0x50
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a30:	2300      	movs	r3, #0
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	f200 80e1 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e0db      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a5c:	e0db      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e0d8      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	0159      	lsls	r1, r3, #5
 8001aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa8:	0150      	lsls	r0, r2, #5
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4621      	mov	r1, r4
 8001ab0:	1a51      	subs	r1, r2, r1
 8001ab2:	6139      	str	r1, [r7, #16]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	018b      	lsls	r3, r1, #6
 8001acc:	4651      	mov	r1, sl
 8001ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	018a      	lsls	r2, r1, #6
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8001adc:	4659      	mov	r1, fp
 8001ade:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	eb18 0303 	adds.w	r3, r8, r3
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	462b      	mov	r3, r5
 8001b04:	eb49 0303 	adc.w	r3, r9, r3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b16:	4629      	mov	r1, r5
 8001b18:	024b      	lsls	r3, r1, #9
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b20:	4621      	mov	r1, r4
 8001b22:	024a      	lsls	r2, r1, #9
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b34:	f7fe fb96 	bl	8000264 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b40:	e058      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0159      	lsls	r1, r3, #5
 8001b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6e:	0150      	lsls	r0, r2, #5
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4641      	mov	r1, r8
 8001b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b94:	ebb2 040a 	subs.w	r4, r2, sl
 8001b98:	eb63 050b 	sbc.w	r5, r3, fp
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	00eb      	lsls	r3, r5, #3
 8001ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001baa:	00e2      	lsls	r2, r4, #3
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	18e3      	adds	r3, r4, r3
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	028b      	lsls	r3, r1, #10
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	028a      	lsls	r2, r1, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	61fa      	str	r2, [r7, #28]
 8001be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be8:	f7fe fb3c 	bl	8000264 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08006c44 	.word	0x08006c44

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe ff10 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f9b6 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04e      	b.n	8001e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d01d      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	e007      	b.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40001800 	.word	0x40001800

08001e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8d2 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8c4 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8d5 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0204 	mvn.w	r2, #4
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ac 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f89e 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8af 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f886 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f878 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f889 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2208      	movs	r2, #8
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f860 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f852 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f863 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fd64 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f982 	bl	80022e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f834 	bl	8002070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0220 	mvn.w	r2, #32
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f954 	bl	80022d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a46      	ldr	r2, [pc, #280]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d00f      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <TIM_Base_SetConfig+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <TIM_Base_SetConfig+0x134>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <TIM_Base_SetConfig+0x138>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d027      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <TIM_Base_SetConfig+0x130>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d023      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <TIM_Base_SetConfig+0x134>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <TIM_Base_SetConfig+0x138>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d017      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <TIM_Base_SetConfig+0x140>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <TIM_Base_SetConfig+0x144>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <TIM_Base_SetConfig+0x148>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <TIM_Base_SetConfig+0x14c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <TIM_Base_SetConfig+0x150>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <TIM_Base_SetConfig+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d108      	bne.n	8002148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0xf8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d103      	bne.n	8002184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
  }
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e05a      	b.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d022      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d01d      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10c      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4313      	orrs	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40010400 	.word	0x40010400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40001800 	.word	0x40001800

080022d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002314:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0208 	add.w	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0208 	add.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b4:	d103      	bne.n	80023be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e00c      	b.n	80023d8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3308      	adds	r3, #8
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e002      	b.n	80023cc <vListInsert+0x2e>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d2f6      	bcs.n	80023c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6892      	ldr	r2, [r2, #8]
 8002426:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6852      	ldr	r2, [r2, #4]
 8002430:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d103      	bne.n	8002444 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericReset+0x2e>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	60fb      	str	r3, [r7, #12]
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05d      	beq.n	8002554 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800249c:	2b00      	cmp	r3, #0
 800249e:	d059      	beq.n	8002554 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	2100      	movs	r1, #0
 80024aa:	fba3 2302 	umull	r2, r3, r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d000      	beq.n	80024b4 <xQueueGenericReset+0x50>
 80024b2:	2101      	movs	r1, #1
 80024b4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d14c      	bne.n	8002554 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80024ba:	f002 f983 	bl	80047c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	441a      	add	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2200      	movs	r2, #0
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6939      	ldr	r1, [r7, #16]
 80024ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	441a      	add	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d114      	bne.n	800253a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01a      	beq.n	800254e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	3310      	adds	r3, #16
 800251c:	4618      	mov	r0, r3
 800251e:	f001 f889 	bl	8003634 <xTaskRemoveFromEventList>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d012      	beq.n	800254e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <xQueueGenericReset+0x11c>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	e009      	b.n	800254e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	3310      	adds	r3, #16
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fedc 	bl	80022fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fed7 	bl	80022fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800254e:	f002 f969 	bl	8004824 <vPortExitCritical>
 8002552:	e001      	b.n	8002558 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <xQueueGenericReset+0x110>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	60bb      	str	r3, [r7, #8]
    }
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002574:	697b      	ldr	r3, [r7, #20]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000ed04 	.word	0xe000ed04

08002584 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d02e      	beq.n	80025fa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800259c:	2100      	movs	r1, #0
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	fba3 2302 	umull	r2, r3, r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d000      	beq.n	80025ac <xQueueGenericCreate+0x28>
 80025aa:	2101      	movs	r1, #1
 80025ac:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d123      	bne.n	80025fa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025ba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025be:	d81c      	bhi.n	80025fa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3350      	adds	r3, #80	; 0x50
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fa24 	bl	8004a1c <pvPortMalloc>
 80025d4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01c      	beq.n	8002616 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3350      	adds	r3, #80	; 0x50
 80025e4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025e6:	79fa      	ldrb	r2, [r7, #7]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f814 	bl	8002620 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80025f8:	e00d      	b.n	8002616 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericCreate+0x92>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	613b      	str	r3, [r7, #16]
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002616:	69fb      	ldr	r3, [r7, #28]
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e002      	b.n	8002642 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800264e:	2101      	movs	r1, #1
 8002650:	69b8      	ldr	r0, [r7, #24]
 8002652:	f7ff ff07 	bl	8002464 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	2073      	movs	r0, #115	; 0x73
 8002666:	f003 fadd 	bl	8005c24 <SEGGER_SYSVIEW_RecordU32x3>
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08f      	sub	sp, #60	; 0x3c
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <xQueueReceive+0x30>
        __asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	623b      	str	r3, [r7, #32]
    }
 80026a0:	bf00      	nop
 80026a2:	e7fe      	b.n	80026a2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <xQueueReceive+0x3e>
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <xQueueReceive+0x42>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <xQueueReceive+0x44>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueReceive+0x5e>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	61fb      	str	r3, [r7, #28]
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026d2:	f001 f9b3 	bl	8003a3c <xTaskGetSchedulerState>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <xQueueReceive+0x6e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <xQueueReceive+0x72>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <xQueueReceive+0x74>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <xQueueReceive+0x8e>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61bb      	str	r3, [r7, #24]
    }
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002702:	f002 f85f 	bl	80047c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02f      	beq.n	8002772 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002716:	f000 f8bd 	bl	8002894 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	4618      	mov	r0, r3
 800271e:	f004 f85b 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002722:	4604      	mov	r4, r0
 8002724:	2000      	movs	r0, #0
 8002726:	f004 f857 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2101      	movs	r1, #1
 8002730:	9100      	str	r1, [sp, #0]
 8002732:	4621      	mov	r1, r4
 8002734:	205c      	movs	r0, #92	; 0x5c
 8002736:	f003 faeb 	bl	8005d10 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00f      	beq.n	800276a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	3310      	adds	r3, #16
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff70 	bl	8003634 <xTaskRemoveFromEventList>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800275a:	4b4d      	ldr	r3, [pc, #308]	; (8002890 <xQueueReceive+0x21c>)
 800275c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800276a:	f002 f85b 	bl	8004824 <vPortExitCritical>
                return pdPASS;
 800276e:	2301      	movs	r3, #1
 8002770:	e08a      	b.n	8002888 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d113      	bne.n	80027a0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002778:	f002 f854 	bl	8004824 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f82a 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002784:	4604      	mov	r4, r0
 8002786:	2000      	movs	r0, #0
 8002788:	f004 f826 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2101      	movs	r1, #1
 8002792:	9100      	str	r1, [sp, #0]
 8002794:	4621      	mov	r1, r4
 8002796:	205c      	movs	r0, #92	; 0x5c
 8002798:	f003 faba 	bl	8005d10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800279c:	2300      	movs	r3, #0
 800279e:	e073      	b.n	8002888 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f81a 	bl	80037e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027b4:	f002 f836 	bl	8004824 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027b8:	f000 fc1c 	bl	8002ff4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027bc:	f002 f802 	bl	80047c4 <vPortEnterCritical>
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d103      	bne.n	80027d6 <xQueueReceive+0x162>
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e2:	d103      	bne.n	80027ec <xQueueReceive+0x178>
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ec:	f002 f81a 	bl	8004824 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f0:	1d3a      	adds	r2, r7, #4
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 f809 	bl	8003810 <xTaskCheckForTimeOut>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d124      	bne.n	800284e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002806:	f000 f8bd 	bl	8002984 <prvIsQueueEmpty>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d018      	beq.n	8002842 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fe9f 	bl	800355c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800281e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002820:	f000 f85e 	bl	80028e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002824:	f000 fbf4 	bl	8003010 <xTaskResumeAll>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f af69 	bne.w	8002702 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <xQueueReceive+0x21c>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	e75f      	b.n	8002702 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f84c 	bl	80028e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002848:	f000 fbe2 	bl	8003010 <xTaskResumeAll>
 800284c:	e759      	b.n	8002702 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800284e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002850:	f000 f846 	bl	80028e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002854:	f000 fbdc 	bl	8003010 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f893 	bl	8002984 <prvIsQueueEmpty>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f43f af4e 	beq.w	8002702 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	4618      	mov	r0, r3
 800286a:	f003 ffb5 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 800286e:	4604      	mov	r4, r0
 8002870:	2000      	movs	r0, #0
 8002872:	f003 ffb1 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2101      	movs	r1, #1
 800287c:	9100      	str	r1, [sp, #0]
 800287e:	4621      	mov	r1, r4
 8002880:	205c      	movs	r0, #92	; 0x5c
 8002882:	f003 fa45 	bl	8005d10 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002886:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002888:	4618      	mov	r0, r3
 800288a:	3734      	adds	r7, #52	; 0x34
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	441a      	add	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d303      	bcc.n	80028c8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68d9      	ldr	r1, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	461a      	mov	r2, r3
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f004 f90e 	bl	8006af4 <memcpy>
    }
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028e8:	f001 ff6c 	bl	80047c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f4:	e011      	b.n	800291a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d012      	beq.n	8002924 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3324      	adds	r3, #36	; 0x24
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe96 	bl	8003634 <xTaskRemoveFromEventList>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800290e:	f000 ffe5 	bl	80038dc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	3b01      	subs	r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	dce9      	bgt.n	80028f6 <prvUnlockQueue+0x16>
 8002922:	e000      	b.n	8002926 <prvUnlockQueue+0x46>
                    break;
 8002924:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	22ff      	movs	r2, #255	; 0xff
 800292a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800292e:	f001 ff79 	bl	8004824 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002932:	f001 ff47 	bl	80047c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800293e:	e011      	b.n	8002964 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3310      	adds	r3, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fe71 	bl	8003634 <xTaskRemoveFromEventList>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002958:	f000 ffc0 	bl	80038dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800295c:	7bbb      	ldrb	r3, [r7, #14]
 800295e:	3b01      	subs	r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002968:	2b00      	cmp	r3, #0
 800296a:	dce9      	bgt.n	8002940 <prvUnlockQueue+0x60>
 800296c:	e000      	b.n	8002970 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800296e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002978:	f001 ff54 	bl	8004824 <vPortExitCritical>
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800298c:	f001 ff1a 	bl	80047c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002998:	2301      	movs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e001      	b.n	80029a2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029a2:	f001 ff3f 	bl	8004824 <vPortExitCritical>

    return xReturn;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	60fb      	str	r3, [r7, #12]
    }
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d024      	beq.n	8002a2a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e01e      	b.n	8002a24 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <vQueueAddToRegistry+0xa8>)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d105      	bne.n	8002a02 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <vQueueAddToRegistry+0xa8>)
 80029fc:	4413      	add	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
                    break;
 8002a00:	e013      	b.n	8002a2a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <vQueueAddToRegistry+0x6e>
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <vQueueAddToRegistry+0xa8>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <vQueueAddToRegistry+0xa8>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9dd      	bls.n	80029e6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00f      	beq.n	8002a50 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 feca 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002a44:	4601      	mov	r1, r0
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2071      	movs	r0, #113	; 0x71
 8002a4c:	f003 f890 	bl	8005b70 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200000dc 	.word	0x200000dc

08002a5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a6c:	f001 feaa 	bl	80047c4 <vPortEnterCritical>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7c:	d103      	bne.n	8002a86 <vQueueWaitForMessageRestricted+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a92:	d103      	bne.n	8002a9c <vQueueWaitForMessageRestricted+0x40>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a9c:	f001 fec2 	bl	8004824 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3324      	adds	r3, #36	; 0x24
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fd77 	bl	80035a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff12 	bl	80028e0 <prvUnlockQueue>
    }
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 ff9f 	bl	8004a1c <pvPortMalloc>
 8002ade:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ae6:	2058      	movs	r0, #88	; 0x58
 8002ae8:	f001 ff98 	bl	8004a1c <pvPortMalloc>
 8002aec:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002af4:	2258      	movs	r2, #88	; 0x58
 8002af6:	2100      	movs	r1, #0
 8002af8:	69f8      	ldr	r0, [r7, #28]
 8002afa:	f003 ffcf 	bl	8006a9c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
 8002b04:	e005      	b.n	8002b12 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f002 f842 	bl	8004b90 <vPortFree>
 8002b0c:	e001      	b.n	8002b12 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9303      	str	r3, [sp, #12]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	9302      	str	r3, [sp, #8]
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f80e 	bl	8002b50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b34:	69f8      	ldr	r0, [r7, #28]
 8002b36:	f000 f899 	bl	8002c6c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e002      	b.n	8002b46 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b44:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b46:	69bb      	ldr	r3, [r7, #24]
    }
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	21a5      	movs	r1, #165	; 0xa5
 8002b6a:	f003 ff97 	bl	8006a9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	617b      	str	r3, [r7, #20]
    }
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01e      	beq.n	8002bec <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e012      	b.n	8002bda <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	7819      	ldrb	r1, [r3, #0]
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3334      	adds	r3, #52	; 0x34
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	d9e9      	bls.n	8002bb4 <prvInitialiseNewTask+0x64>
 8002be0:	e000      	b.n	8002be4 <prvInitialiseNewTask+0x94>
            {
                break;
 8002be2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d90a      	bls.n	8002c08 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	613b      	str	r3, [r7, #16]
    }
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d901      	bls.n	8002c12 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fb8a 	bl	800233c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb85 	bl	800233c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	f1c3 0205 	rsb	r2, r3, #5
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	69b8      	ldr	r0, [r7, #24]
 8002c4e:	f001 fc0d 	bl	800446c <pxPortInitialiseStack>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c74:	f001 fda6 	bl	80047c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <prvAddNewTaskToReadyList+0x14c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4a4e      	ldr	r2, [pc, #312]	; (8002db8 <prvAddNewTaskToReadyList+0x14c>)
 8002c80:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <prvAddNewTaskToReadyList+0x150>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c8a:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <prvAddNewTaskToReadyList+0x150>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <prvAddNewTaskToReadyList+0x14c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d110      	bne.n	8002cba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c98:	f000 fe36 	bl	8003908 <prvInitialiseTaskLists>
 8002c9c:	e00d      	b.n	8002cba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c9e:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <prvAddNewTaskToReadyList+0x154>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ca6:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <prvAddNewTaskToReadyList+0x150>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d802      	bhi.n	8002cba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <prvAddNewTaskToReadyList+0x150>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <prvAddNewTaskToReadyList+0x158>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <prvAddNewTaskToReadyList+0x158>)
 8002cc2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <prvAddNewTaskToReadyList+0x158>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <prvAddNewTaskToReadyList+0x94>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fcb9 	bl	800664c <SEGGER_SYSVIEW_OnTaskCreate>
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	461d      	mov	r5, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	1ae3      	subs	r3, r4, r3
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	f002 f90a 	bl	8004f14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 fd26 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <prvAddNewTaskToReadyList+0x15c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	4a2c      	ldr	r2, [pc, #176]	; (8002dc8 <prvAddNewTaskToReadyList+0x15c>)
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	492b      	ldr	r1, [pc, #172]	; (8002dcc <prvAddNewTaskToReadyList+0x160>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	3204      	adds	r2, #4
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1d1a      	adds	r2, r3, #4
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <prvAddNewTaskToReadyList+0x160>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	615a      	str	r2, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4918      	ldr	r1, [pc, #96]	; (8002dcc <prvAddNewTaskToReadyList+0x160>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	4814      	ldr	r0, [pc, #80]	; (8002dcc <prvAddNewTaskToReadyList+0x160>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4403      	add	r3, r0
 8002d84:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d86:	f001 fd4d 	bl	8004824 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <prvAddNewTaskToReadyList+0x154>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00e      	beq.n	8002db0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <prvAddNewTaskToReadyList+0x150>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <prvAddNewTaskToReadyList+0x164>)
 8002da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdb0      	pop	{r4, r5, r7, pc}
 8002db8:	200001f4 	.word	0x200001f4
 8002dbc:	2000011c 	.word	0x2000011c
 8002dc0:	20000200 	.word	0x20000200
 8002dc4:	20000210 	.word	0x20000210
 8002dc8:	200001fc 	.word	0x200001fc
 8002dcc:	20000120 	.word	0x20000120
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ddc:	f001 fcf2 	bl	80047c4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <vTaskDelete+0x18>
 8002de6:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <vTaskDelete+0x134>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e000      	b.n	8002dee <vTaskDelete+0x1a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fb0b 	bl	8002410 <uxListRemove>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d115      	bne.n	8002e2c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	4941      	ldr	r1, [pc, #260]	; (8002f0c <vTaskDelete+0x138>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <vTaskDelete+0x58>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43da      	mvns	r2, r3
 8002e22:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <vTaskDelete+0x13c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4013      	ands	r3, r2
 8002e28:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <vTaskDelete+0x13c>)
 8002e2a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3318      	adds	r3, #24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fae9 	bl	8002410 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002e3e:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <vTaskDelete+0x140>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <vTaskDelete+0x140>)
 8002e46:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <vTaskDelete+0x134>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d118      	bne.n	8002e84 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3304      	adds	r3, #4
 8002e56:	4619      	mov	r1, r3
 8002e58:	482f      	ldr	r0, [pc, #188]	; (8002f18 <vTaskDelete+0x144>)
 8002e5a:	f7ff fa7c 	bl	8002356 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <vTaskDelete+0x148>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <vTaskDelete+0x148>)
 8002e66:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fcb4 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4619      	mov	r1, r3
 8002e74:	2022      	movs	r0, #34	; 0x22
 8002e76:	f002 fe3f 	bl	8005af8 <SEGGER_SYSVIEW_RecordU32>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 f8b1 	bl	8004fe4 <SYSVIEW_DeleteTask>
 8002e82:	e013      	b.n	8002eac <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <vTaskDelete+0x14c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <vTaskDelete+0x14c>)
 8002e8c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fca1 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4619      	mov	r1, r3
 8002e9a:	2022      	movs	r0, #34	; 0x22
 8002e9c:	f002 fe2c 	bl	8005af8 <SEGGER_SYSVIEW_RecordU32>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 f89e 	bl	8004fe4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002ea8:	f000 fdac 	bl	8003a04 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002eac:	f001 fcba 	bl	8004824 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <vTaskDelete+0x134>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d002      	beq.n	8002ec0 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fd92 	bl	80039e4 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <vTaskDelete+0x150>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <vTaskDelete+0x134>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d116      	bne.n	8002f00 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <vTaskDelete+0x154>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <vTaskDelete+0x11c>
        __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60bb      	str	r3, [r7, #8]
    }
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <vTaskDelete+0x158>)
 8002ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	2000011c 	.word	0x2000011c
 8002f0c:	20000120 	.word	0x20000120
 8002f10:	200001fc 	.word	0x200001fc
 8002f14:	20000210 	.word	0x20000210
 8002f18:	200001c8 	.word	0x200001c8
 8002f1c:	200001dc 	.word	0x200001dc
 8002f20:	200001f4 	.word	0x200001f4
 8002f24:	20000200 	.word	0x20000200
 8002f28:	2000021c 	.word	0x2000021c
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <vTaskStartScheduler+0xa4>)
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2282      	movs	r2, #130	; 0x82
 8002f42:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <vTaskStartScheduler+0xa8>)
 8002f44:	4825      	ldr	r0, [pc, #148]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f46:	f7ff fdbd 	bl	8002ac4 <xTaskCreate>
 8002f4a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002f52:	f001 f807 	bl	8003f64 <xTimerCreateTimerTask>
 8002f56:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d124      	bne.n	8002fa8 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60bb      	str	r3, [r7, #8]
    }
 8002f70:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <vTaskStartScheduler+0xb0>)
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <vTaskStartScheduler+0xb4>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <vTaskStartScheduler+0xb8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <vTaskStartScheduler+0xbc>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <vTaskStartScheduler+0xa4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d102      	bne.n	8002f98 <vTaskStartScheduler+0x68>
 8002f92:	f003 fb3f 	bl	8006614 <SEGGER_SYSVIEW_OnIdle>
 8002f96:	e004      	b.n	8002fa2 <vTaskStartScheduler+0x72>
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <vTaskStartScheduler+0xbc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fb97 	bl	80066d0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002fa2:	f001 faef 	bl	8004584 <xPortStartScheduler>
 8002fa6:	e00e      	b.n	8002fc6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fae:	d10a      	bne.n	8002fc6 <vTaskStartScheduler+0x96>
        __asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	607b      	str	r3, [r7, #4]
    }
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <vTaskStartScheduler+0xc0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000218 	.word	0x20000218
 8002fd8:	08006b54 	.word	0x08006b54
 8002fdc:	080038f5 	.word	0x080038f5
 8002fe0:	20000214 	.word	0x20000214
 8002fe4:	20000200 	.word	0x20000200
 8002fe8:	200001f8 	.word	0x200001f8
 8002fec:	2000011c 	.word	0x2000011c
 8002ff0:	2000000c 	.word	0x2000000c

08002ff4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <vTaskSuspendAll+0x18>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a03      	ldr	r2, [pc, #12]	; (800300c <vTaskSuspendAll+0x18>)
 8003000:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	2000021c 	.word	0x2000021c

08003010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <xTaskResumeAll+0x1dc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <xTaskResumeAll+0x2c>
        __asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	607b      	str	r3, [r7, #4]
    }
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800303c:	f001 fbc2 	bl	80047c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <xTaskResumeAll+0x1dc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3b01      	subs	r3, #1
 8003046:	4a69      	ldr	r2, [pc, #420]	; (80031ec <xTaskResumeAll+0x1dc>)
 8003048:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800304a:	4b68      	ldr	r3, [pc, #416]	; (80031ec <xTaskResumeAll+0x1dc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 80c4 	bne.w	80031dc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <xTaskResumeAll+0x1e0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80bf 	beq.w	80031dc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800305e:	e08e      	b.n	800317e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <xTaskResumeAll+0x1e4>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	6a12      	ldr	r2, [r2, #32]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	69d2      	ldr	r2, [r2, #28]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3318      	adds	r3, #24
 800308a:	429a      	cmp	r2, r3
 800308c:	d103      	bne.n	8003096 <xTaskResumeAll+0x86>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2200      	movs	r2, #0
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1e5a      	subs	r2, r3, #1
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	68d2      	ldr	r2, [r2, #12]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	3304      	adds	r3, #4
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d103      	bne.n	80030d4 <xTaskResumeAll+0xc4>
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fb34 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <xTaskResumeAll+0x1e8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a3f      	ldr	r2, [pc, #252]	; (80031f8 <xTaskResumeAll+0x1e8>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	493e      	ldr	r1, [pc, #248]	; (80031fc <xTaskResumeAll+0x1ec>)
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3304      	adds	r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	3204      	adds	r2, #4
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <xTaskResumeAll+0x1ec>)
 8003142:	441a      	add	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	615a      	str	r2, [r3, #20]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	492b      	ldr	r1, [pc, #172]	; (80031fc <xTaskResumeAll+0x1ec>)
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	4827      	ldr	r0, [pc, #156]	; (80031fc <xTaskResumeAll+0x1ec>)
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4403      	add	r3, r0
 8003168:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <xTaskResumeAll+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <xTaskResumeAll+0x1f4>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <xTaskResumeAll+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af6c 	bne.w	8003060 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800318e:	f000 fc39 	bl	8003a04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <xTaskResumeAll+0x1f8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800319e:	f000 f859 	bl	8003254 <xTaskIncrementTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <xTaskResumeAll+0x1f4>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f1      	bne.n	800319e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <xTaskResumeAll+0x1f8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <xTaskResumeAll+0x1f4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <xTaskResumeAll+0x1fc>)
 80031ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031dc:	f001 fb22 	bl	8004824 <vPortExitCritical>

    return xAlreadyYielded;
 80031e0:	69bb      	ldr	r3, [r7, #24]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000021c 	.word	0x2000021c
 80031f0:	200001f4 	.word	0x200001f4
 80031f4:	200001b4 	.word	0x200001b4
 80031f8:	200001fc 	.word	0x200001fc
 80031fc:	20000120 	.word	0x20000120
 8003200:	2000011c 	.word	0x2000011c
 8003204:	20000208 	.word	0x20000208
 8003208:	20000204 	.word	0x20000204
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <xTaskGetTickCount+0x1c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800321c:	687b      	ldr	r3, [r7, #4]
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200001f8 	.word	0x200001f8

08003230 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003236:	f001 fbb1 	bl	800499c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <xTaskGetTickCountFromISR+0x20>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003244:	683b      	ldr	r3, [r7, #0]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200001f8 	.word	0x200001f8

08003254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800325e:	4b7f      	ldr	r3, [pc, #508]	; (800345c <xTaskIncrementTick+0x208>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f040 80f0 	bne.w	8003448 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003268:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <xTaskIncrementTick+0x20c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003270:	4a7b      	ldr	r2, [pc, #492]	; (8003460 <xTaskIncrementTick+0x20c>)
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d120      	bne.n	80032be <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <xTaskIncrementTick+0x210>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <xTaskIncrementTick+0x48>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	607b      	str	r3, [r7, #4]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xTaskIncrementTick+0x46>
 800329c:	4b71      	ldr	r3, [pc, #452]	; (8003464 <xTaskIncrementTick+0x210>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	4b71      	ldr	r3, [pc, #452]	; (8003468 <xTaskIncrementTick+0x214>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <xTaskIncrementTick+0x210>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4a6f      	ldr	r2, [pc, #444]	; (8003468 <xTaskIncrementTick+0x214>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b6e      	ldr	r3, [pc, #440]	; (800346c <xTaskIncrementTick+0x218>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a6d      	ldr	r2, [pc, #436]	; (800346c <xTaskIncrementTick+0x218>)
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	f000 fba3 	bl	8003a04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <xTaskIncrementTick+0x21c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a3a      	ldr	r2, [r7, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f0c0 80aa 	bcc.w	800341e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <xTaskIncrementTick+0x210>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <xTaskIncrementTick+0x21c>)
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032da:	601a      	str	r2, [r3, #0]
                    break;
 80032dc:	e09f      	b.n	800341e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032de:	4b61      	ldr	r3, [pc, #388]	; (8003464 <xTaskIncrementTick+0x210>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d203      	bcs.n	80032fe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032f6:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <xTaskIncrementTick+0x21c>)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032fc:	e08f      	b.n	800341e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	68d2      	ldr	r2, [r2, #12]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	3304      	adds	r3, #4
 8003320:	429a      	cmp	r2, r3
 8003322:	d103      	bne.n	800332c <xTaskIncrementTick+0xd8>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2200      	movs	r2, #0
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1e5a      	subs	r2, r3, #1
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01e      	beq.n	8003382 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	6a12      	ldr	r2, [r2, #32]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	69d2      	ldr	r2, [r2, #28]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3318      	adds	r3, #24
 8003366:	429a      	cmp	r2, r3
 8003368:	d103      	bne.n	8003372 <xTaskIncrementTick+0x11e>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2200      	movs	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4618      	mov	r0, r3
 8003386:	f003 f9e5 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartReady>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	2201      	movs	r2, #1
 8003390:	409a      	lsls	r2, r3
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <xTaskIncrementTick+0x220>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	4a36      	ldr	r2, [pc, #216]	; (8003474 <xTaskIncrementTick+0x220>)
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4935      	ldr	r1, [pc, #212]	; (8003478 <xTaskIncrementTick+0x224>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3304      	adds	r3, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	3204      	adds	r2, #4
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a26      	ldr	r2, [pc, #152]	; (8003478 <xTaskIncrementTick+0x224>)
 80033e0:	441a      	add	r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	615a      	str	r2, [r3, #20]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4923      	ldr	r1, [pc, #140]	; (8003478 <xTaskIncrementTick+0x224>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	481f      	ldr	r0, [pc, #124]	; (8003478 <xTaskIncrementTick+0x224>)
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <xTaskIncrementTick+0x228>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	f67f af59 	bls.w	80032ca <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341c:	e755      	b.n	80032ca <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <xTaskIncrementTick+0x228>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4914      	ldr	r1, [pc, #80]	; (8003478 <xTaskIncrementTick+0x224>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d901      	bls.n	800343a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <xTaskIncrementTick+0x22c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	e004      	b.n	8003452 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <xTaskIncrementTick+0x230>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <xTaskIncrementTick+0x230>)
 8003450:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	2000021c 	.word	0x2000021c
 8003460:	200001f8 	.word	0x200001f8
 8003464:	200001ac 	.word	0x200001ac
 8003468:	200001b0 	.word	0x200001b0
 800346c:	2000020c 	.word	0x2000020c
 8003470:	20000214 	.word	0x20000214
 8003474:	200001fc 	.word	0x200001fc
 8003478:	20000120 	.word	0x20000120
 800347c:	2000011c 	.word	0x2000011c
 8003480:	20000208 	.word	0x20000208
 8003484:	20000204 	.word	0x20000204

08003488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <vTaskSwitchContext+0xbc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <vTaskSwitchContext+0xc0>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800349c:	e04d      	b.n	800353a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <vTaskSwitchContext+0xc0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <vTaskSwitchContext+0xc4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f1c3 031f 	rsb	r3, r3, #31
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	4925      	ldr	r1, [pc, #148]	; (8003550 <vTaskSwitchContext+0xc8>)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
    }
 80034e0:	bf00      	nop
 80034e2:	e7fe      	b.n	80034e2 <vTaskSwitchContext+0x5a>
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <vTaskSwitchContext+0xc8>)
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3308      	adds	r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d104      	bne.n	8003514 <vTaskSwitchContext+0x8c>
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <vTaskSwitchContext+0xcc>)
 800351c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <vTaskSwitchContext+0xcc>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <vTaskSwitchContext+0xd0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d102      	bne.n	8003530 <vTaskSwitchContext+0xa8>
 800352a:	f003 f873 	bl	8006614 <SEGGER_SYSVIEW_OnIdle>
}
 800352e:	e004      	b.n	800353a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <vTaskSwitchContext+0xcc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 f8cb 	bl	80066d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	2000021c 	.word	0x2000021c
 8003548:	20000208 	.word	0x20000208
 800354c:	200001fc 	.word	0x200001fc
 8003550:	20000120 	.word	0x20000120
 8003554:	2000011c 	.word	0x2000011c
 8003558:	20000218 	.word	0x20000218

0800355c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	60fb      	str	r3, [r7, #12]
    }
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <vTaskPlaceOnEventList+0x44>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3318      	adds	r3, #24
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe ff07 	bl	800239e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003590:	2101      	movs	r1, #1
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	f000 fc66 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	2000011c 	.word	0x2000011c

080035a4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	613b      	str	r3, [r7, #16]
    }
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	61da      	str	r2, [r3, #28]
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	3218      	adds	r2, #24
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f103 0218 	add.w	r2, r3, #24
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003618:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800361a:	2024      	movs	r0, #36	; 0x24
 800361c:	f002 fa4e 	bl	8005abc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	68b8      	ldr	r0, [r7, #8]
 8003624:	f000 fc1e 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
    }
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000011c 	.word	0x2000011c

08003634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60fb      	str	r3, [r7, #12]
    }
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	6a12      	ldr	r2, [r2, #32]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	69d2      	ldr	r2, [r2, #28]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	3318      	adds	r3, #24
 8003682:	429a      	cmp	r2, r3
 8003684:	d103      	bne.n	800368e <xTaskRemoveFromEventList+0x5a>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	2200      	movs	r2, #0
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369e:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <xTaskRemoveFromEventList+0x198>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d162      	bne.n	800376c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	6a3a      	ldr	r2, [r7, #32]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	3304      	adds	r3, #4
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d103      	bne.n	80036d4 <xTaskRemoveFromEventList+0xa0>
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2200      	movs	r2, #0
 80036d8:	615a      	str	r2, [r3, #20]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 f834 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	2201      	movs	r2, #1
 80036f2:	409a      	lsls	r2, r3
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <xTaskRemoveFromEventList+0x19c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <xTaskRemoveFromEventList+0x19c>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4934      	ldr	r1, [pc, #208]	; (80037d4 <xTaskRemoveFromEventList+0x1a0>)
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	3204      	adds	r2, #4
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <xTaskRemoveFromEventList+0x1a0>)
 8003742:	441a      	add	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4921      	ldr	r1, [pc, #132]	; (80037d4 <xTaskRemoveFromEventList+0x1a0>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	481d      	ldr	r0, [pc, #116]	; (80037d4 <xTaskRemoveFromEventList+0x1a0>)
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4403      	add	r3, r0
 8003768:	6019      	str	r1, [r3, #0]
 800376a:	e01b      	b.n	80037a4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <xTaskRemoveFromEventList+0x1a4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	61da      	str	r2, [r3, #28]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	3218      	adds	r2, #24
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f103 0218 	add.w	r2, r3, #24
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	4a10      	ldr	r2, [pc, #64]	; (80037d8 <xTaskRemoveFromEventList+0x1a4>)
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <xTaskRemoveFromEventList+0x1a4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <xTaskRemoveFromEventList+0x1a4>)
 80037a2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <xTaskRemoveFromEventList+0x1a8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d905      	bls.n	80037be <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <xTaskRemoveFromEventList+0x1ac>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e001      	b.n	80037c2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	2000021c 	.word	0x2000021c
 80037d0:	200001fc 	.word	0x200001fc
 80037d4:	20000120 	.word	0x20000120
 80037d8:	200001b4 	.word	0x200001b4
 80037dc:	2000011c 	.word	0x2000011c
 80037e0:	20000208 	.word	0x20000208

080037e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <vTaskInternalSetTimeOutState+0x24>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <vTaskInternalSetTimeOutState+0x28>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	605a      	str	r2, [r3, #4]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	2000020c 	.word	0x2000020c
 800380c:	200001f8 	.word	0x200001f8

08003810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	60fb      	str	r3, [r7, #12]
    }
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003852:	f000 ffb7 	bl	80047c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <xTaskCheckForTimeOut+0xc4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386e:	d102      	bne.n	8003876 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e026      	b.n	80038c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <xTaskCheckForTimeOut+0xc8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d00a      	beq.n	8003898 <xTaskCheckForTimeOut+0x88>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	429a      	cmp	r2, r3
 800388a:	d305      	bcc.n	8003898 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e015      	b.n	80038c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20b      	bcs.n	80038ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad2      	subs	r2, r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff98 	bl	80037e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e004      	b.n	80038c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038c4:	f000 ffae 	bl	8004824 <vPortExitCritical>

    return xReturn;
 80038c8:	69fb      	ldr	r3, [r7, #28]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001f8 	.word	0x200001f8
 80038d8:	2000020c 	.word	0x2000020c

080038dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <vTaskMissedYield+0x14>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	20000208 	.word	0x20000208

080038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038fc:	f000 f844 	bl	8003988 <prvCheckTasksWaitingTermination>
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8003900:	f7fd f8b4 	bl	8000a6c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003904:	e7fa      	b.n	80038fc <prvIdleTask+0x8>
	...

08003908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	e00c      	b.n	800392e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <prvInitialiseTaskLists+0x60>)
 8003920:	4413      	add	r3, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fcea 	bl	80022fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3301      	adds	r3, #1
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d9ef      	bls.n	8003914 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003934:	480d      	ldr	r0, [pc, #52]	; (800396c <prvInitialiseTaskLists+0x64>)
 8003936:	f7fe fce1 	bl	80022fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800393a:	480d      	ldr	r0, [pc, #52]	; (8003970 <prvInitialiseTaskLists+0x68>)
 800393c:	f7fe fcde 	bl	80022fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <prvInitialiseTaskLists+0x6c>)
 8003942:	f7fe fcdb 	bl	80022fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003946:	480c      	ldr	r0, [pc, #48]	; (8003978 <prvInitialiseTaskLists+0x70>)
 8003948:	f7fe fcd8 	bl	80022fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800394c:	480b      	ldr	r0, [pc, #44]	; (800397c <prvInitialiseTaskLists+0x74>)
 800394e:	f7fe fcd5 	bl	80022fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <prvInitialiseTaskLists+0x78>)
 8003954:	4a05      	ldr	r2, [pc, #20]	; (800396c <prvInitialiseTaskLists+0x64>)
 8003956:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <prvInitialiseTaskLists+0x7c>)
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <prvInitialiseTaskLists+0x68>)
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000120 	.word	0x20000120
 800396c:	20000184 	.word	0x20000184
 8003970:	20000198 	.word	0x20000198
 8003974:	200001b4 	.word	0x200001b4
 8003978:	200001c8 	.word	0x200001c8
 800397c:	200001e0 	.word	0x200001e0
 8003980:	200001ac 	.word	0x200001ac
 8003984:	200001b0 	.word	0x200001b0

08003988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800398e:	e019      	b.n	80039c4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003990:	f000 ff18 	bl	80047c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <prvCheckTasksWaitingTermination+0x50>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fd35 	bl	8002410 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <prvCheckTasksWaitingTermination+0x54>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <prvCheckTasksWaitingTermination+0x54>)
 80039ae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039b8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80039ba:	f000 ff33 	bl	8004824 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f810 	bl	80039e4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e1      	bne.n	8003990 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200001c8 	.word	0x200001c8
 80039dc:	200001f4 	.word	0x200001f4
 80039e0:	200001dc 	.word	0x200001dc

080039e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 f8cd 	bl	8004b90 <vPortFree>
            vPortFree( pxTCB );
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 f8ca 	bl	8004b90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <prvResetNextTaskUnblockTime+0x30>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <prvResetNextTaskUnblockTime+0x34>)
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a1a:	e005      	b.n	8003a28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <prvResetNextTaskUnblockTime+0x30>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <prvResetNextTaskUnblockTime+0x34>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	200001ac 	.word	0x200001ac
 8003a38:	20000214 	.word	0x20000214

08003a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <xTaskGetSchedulerState+0x34>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	e008      	b.n	8003a62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <xTaskGetSchedulerState+0x38>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e001      	b.n	8003a62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a62:	687b      	ldr	r3, [r7, #4]
    }
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000200 	.word	0x20000200
 8003a74:	2000021c 	.word	0x2000021c

08003a78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	613b      	str	r3, [r7, #16]
    }
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003aa2:	f000 fe8f 	bl	80047c4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	3354      	adds	r3, #84	; 0x54
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d022      	beq.n	8003afe <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	3214      	adds	r2, #20
 8003ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	43d2      	mvns	r2, r2
 8003ac8:	4011      	ands	r1, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	3214      	adds	r2, #20
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3354      	adds	r3, #84	; 0x54
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	6a38      	ldr	r0, [r7, #32]
 8003aea:	f000 f9bb 	bl	8003e64 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003aee:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003afe:	f000 fe91 	bl	8004824 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003b02:	f000 fe5f 	bl	80047c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	2040      	movs	r0, #64	; 0x40
 8003b14:	f002 f8fc 	bl	8005d10 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	3214      	adds	r2, #20
 8003b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	3354      	adds	r3, #84	; 0x54
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d002      	beq.n	8003b46 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e00e      	b.n	8003b64 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	3214      	adds	r2, #20
 8003b4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	43d2      	mvns	r2, r2
 8003b56:	4011      	ands	r1, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	3214      	adds	r2, #20
 8003b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <xTaskGenericNotifyWait+0x108>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3354      	adds	r3, #84	; 0x54
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b72:	f000 fe57 	bl	8004824 <vPortExitCritical>

        return xReturn;
 8003b76:	697b      	ldr	r3, [r7, #20]
    }
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2000011c 	.word	0x2000011c
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b094      	sub	sp, #80	; 0x50
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003b96:	2301      	movs	r3, #1
 8003b98:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bd2:	f000 fee3 	bl	800499c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003bda:	f3ef 8211 	mrs	r2, BASEPRI
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	623a      	str	r2, [r7, #32]
 8003bf0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	3214      	adds	r2, #20
 8003c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3354      	adds	r3, #84	; 0x54
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d83b      	bhi.n	8003ca2 <xTaskGenericNotifyFromISR+0x11a>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <xTaskGenericNotifyFromISR+0xa8>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003cc1 	.word	0x08003cc1
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c79 	.word	0x08003c79
 8003c40:	08003c87 	.word	0x08003c87
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	3214      	adds	r2, #20
 8003c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	3214      	adds	r2, #20
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c5e:	e032      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	3214      	adds	r2, #20
 8003c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	3214      	adds	r2, #20
 8003c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c76:	e026      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	3214      	adds	r2, #20
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c84:	e01f      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d006      	beq.n	8003c9c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	3214      	adds	r2, #20
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003c9a:	e014      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003ca0:	e011      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003ca2:	4b69      	ldr	r3, [pc, #420]	; (8003e48 <xTaskGenericNotifyFromISR+0x2c0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	61bb      	str	r3, [r7, #24]
    }
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003cc4:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fd85 	bl	80067d8 <SEGGER_SYSVIEW_ShrinkId>
 8003cce:	78f9      	ldrb	r1, [r7, #3]
 8003cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cd4:	9201      	str	r2, [sp, #4]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4601      	mov	r1, r0
 8003cde:	203f      	movs	r0, #63	; 0x3f
 8003ce0:	f002 f8a8 	bl	8005e34 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ce4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 80a2 	bne.w	8003e32 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	617b      	str	r3, [r7, #20]
    }
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <xTaskGenericNotifyFromISR+0x2c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d162      	bne.n	8003dda <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d2a:	6892      	ldr	r2, [r2, #8]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d34:	3304      	adds	r3, #4
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d103      	bne.n	8003d42 <xTaskGenericNotifyFromISR+0x1ba>
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 fcfd 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <xTaskGenericNotifyFromISR+0x2c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <xTaskGenericNotifyFromISR+0x2c8>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	4938      	ldr	r1, [pc, #224]	; (8003e54 <xTaskGenericNotifyFromISR+0x2cc>)
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d96:	3204      	adds	r2, #4
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <xTaskGenericNotifyFromISR+0x2cc>)
 8003db0:	441a      	add	r2, r3
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	615a      	str	r2, [r3, #20]
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	4926      	ldr	r1, [pc, #152]	; (8003e54 <xTaskGenericNotifyFromISR+0x2cc>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	4822      	ldr	r0, [pc, #136]	; (8003e54 <xTaskGenericNotifyFromISR+0x2cc>)
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4403      	add	r3, r0
 8003dd6:	6019      	str	r1, [r3, #0]
 8003dd8:	e01b      	b.n	8003e12 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <xTaskGenericNotifyFromISR+0x2d0>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	621a      	str	r2, [r3, #32]
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df4:	3218      	adds	r2, #24
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	f103 0218 	add.w	r2, r3, #24
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <xTaskGenericNotifyFromISR+0x2d0>)
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <xTaskGenericNotifyFromISR+0x2d0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <xTaskGenericNotifyFromISR+0x2d0>)
 8003e10:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <xTaskGenericNotifyFromISR+0x2d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d908      	bls.n	8003e32 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <xTaskGenericNotifyFromISR+0x2d8>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e3c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003e40:	4618      	mov	r0, r3
 8003e42:	3748      	adds	r7, #72	; 0x48
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200001f8 	.word	0x200001f8
 8003e4c:	2000021c 	.word	0x2000021c
 8003e50:	200001fc 	.word	0x200001fc
 8003e54:	20000120 	.word	0x20000120
 8003e58:	200001b4 	.word	0x200001b4
 8003e5c:	2000011c 	.word	0x2000011c
 8003e60:	20000208 	.word	0x20000208

08003e64 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e74:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fac8 	bl	8002410 <uxListRemove>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea4:	d124      	bne.n	8003ef0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	6892      	ldr	r2, [r2, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	3204      	adds	r2, #4
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1d1a      	adds	r2, r3, #4
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ee0:	615a      	str	r2, [r3, #20]
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003eee:	e026      	b.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ef8:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d209      	bcs.n	8003f1c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe fa42 	bl	800239e <vListInsert>
}
 8003f1a:	e010      	b.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe fa38 	bl	800239e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d202      	bcs.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f38:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200001f8 	.word	0x200001f8
 8003f4c:	2000011c 	.word	0x2000011c
 8003f50:	200001fc 	.word	0x200001fc
 8003f54:	200001e0 	.word	0x200001e0
 8003f58:	200001b0 	.word	0x200001b0
 8003f5c:	200001ac 	.word	0x200001ac
 8003f60:	20000214 	.word	0x20000214

08003f64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f6e:	f000 fa47 	bl	8004400 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <xTimerCreateTimerTask+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <xTimerCreateTimerTask+0x58>)
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f88:	490d      	ldr	r1, [pc, #52]	; (8003fc0 <xTimerCreateTimerTask+0x5c>)
 8003f8a:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <xTimerCreateTimerTask+0x60>)
 8003f8c:	f7fe fd9a 	bl	8002ac4 <xTaskCreate>
 8003f90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	603b      	str	r3, [r7, #0]
    }
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fae:	687b      	ldr	r3, [r7, #4]
    }
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000250 	.word	0x20000250
 8003fbc:	20000254 	.word	0x20000254
 8003fc0:	08006b5c 	.word	0x08006b5c
 8003fc4:	0800406d 	.word	0x0800406d

08003fc8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fd4:	e008      	b.n	8003fe8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	18d1      	adds	r1, r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f8dd 	bl	80041b4 <prvInsertTimerInActiveList>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <prvReloadTimer+0xe>
        }
    }
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvProcessExpiredTimer+0x5c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe f9f3 	bl	8002410 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ffc3 	bl	8003fc8 <prvReloadTimer>
 8004042:	e008      	b.n	8004056 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	4798      	blx	r3
    }
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000248 	.word	0x20000248

0800406c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f857 	bl	800412c <prvGetNextExpireTime>
 800407e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f803 	bl	8004090 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800408a:	f000 f8d5 	bl	8004238 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800408e:	e7f1      	b.n	8004074 <prvTimerTask+0x8>

08004090 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800409a:	f7fe ffab 	bl	8002ff4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f866 	bl	8004174 <prvSampleTimeNow>
 80040a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d130      	bne.n	8004112 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d806      	bhi.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040be:	f7fe ffa7 	bl	8003010 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ffa1 	bl	800400c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040ca:	e024      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <prvProcessTimerOrBlockTask+0x90>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <prvProcessTimerOrBlockTask+0x50>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <prvProcessTimerOrBlockTask+0x52>
 80040e0:	2300      	movs	r3, #0
 80040e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <prvProcessTimerOrBlockTask+0x94>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fe fcb3 	bl	8002a5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040f6:	f7fe ff8b 	bl	8003010 <xTaskResumeAll>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <prvProcessTimerOrBlockTask+0x98>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
    }
 8004110:	e001      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004112:	f7fe ff7d 	bl	8003010 <xTaskResumeAll>
    }
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000024c 	.word	0x2000024c
 8004124:	20000250 	.word	0x20000250
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <prvGetNextExpireTime+0x16>
 800413e:	2201      	movs	r2, #1
 8004140:	e000      	b.n	8004144 <prvGetNextExpireTime+0x18>
 8004142:	2200      	movs	r2, #0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e001      	b.n	8004160 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004160:	68fb      	ldr	r3, [r7, #12]
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000248 	.word	0x20000248

08004174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800417c:	f7ff f848 	bl	8003210 <xTaskGetTickCount>
 8004180:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <prvSampleTimeNow+0x3c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d205      	bcs.n	8004198 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800418c:	f000 f912 	bl	80043b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e002      	b.n	800419e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <prvSampleTimeNow+0x3c>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041a4:	68fb      	ldr	r3, [r7, #12]
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000258 	.word	0x20000258

080041b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d812      	bhi.n	8004200 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d302      	bcc.n	80041ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e01b      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvInsertTimerInActiveList+0x7c>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe f8d0 	bl	800239e <vListInsert>
 80041fe:	e012      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d206      	bcs.n	8004216 <prvInsertTimerInActiveList+0x62>
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e007      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <prvInsertTimerInActiveList+0x80>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe f8bc 	bl	800239e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004226:	697b      	ldr	r3, [r7, #20]
    }
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000024c 	.word	0x2000024c
 8004234:	20000248 	.word	0x20000248

08004238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423e:	e0a6      	b.n	800438e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f2c0 80a3 	blt.w	800438e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe f8d9 	bl	8002410 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff87 	bl	8004174 <prvSampleTimeNow>
 8004266:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	2b08      	cmp	r3, #8
 800426e:	f200 808d 	bhi.w	800438c <prvProcessReceivedCommands+0x154>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <prvProcessReceivedCommands+0x40>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429d 	.word	0x0800429d
 800427c:	0800429d 	.word	0x0800429d
 8004280:	08004305 	.word	0x08004305
 8004284:	08004319 	.word	0x08004319
 8004288:	08004363 	.word	0x08004363
 800428c:	0800429d 	.word	0x0800429d
 8004290:	0800429d 	.word	0x0800429d
 8004294:	08004305 	.word	0x08004305
 8004298:	08004319 	.word	0x08004319
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	18d1      	adds	r1, r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	69f8      	ldr	r0, [r7, #28]
 80042bc:	f7ff ff7a 	bl	80041b4 <prvInsertTimerInActiveList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4619      	mov	r1, r3
 80042e0:	69f8      	ldr	r0, [r7, #28]
 80042e2:	f7ff fe71 	bl	8003fc8 <prvReloadTimer>
 80042e6:	e008      	b.n	80042fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	69f8      	ldr	r0, [r7, #28]
 8004300:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004302:	e044      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004316:	e03a      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	617b      	str	r3, [r7, #20]
    }
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	18d1      	adds	r1, r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	69f8      	ldr	r0, [r7, #28]
 800435c:	f7ff ff2a 	bl	80041b4 <prvInsertTimerInActiveList>
                        break;
 8004360:	e015      	b.n	800438e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004370:	69f8      	ldr	r0, [r7, #28]
 8004372:	f000 fc0d 	bl	8004b90 <vPortFree>
 8004376:	e00a      	b.n	800438e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800438a:	e000      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800438c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <prvProcessReceivedCommands+0x178>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f107 0108 	add.w	r1, r7, #8
 8004396:	2200      	movs	r2, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f96b 	bl	8002674 <xQueueReceive>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f af4d 	bne.w	8004240 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000250 	.word	0x20000250

080043b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ba:	e009      	b.n	80043d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f7ff fe1e 	bl	800400c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <prvSwitchTimerLists+0x48>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <prvSwitchTimerLists+0x48>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
    }
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000248 	.word	0x20000248
 80043fc:	2000024c 	.word	0x2000024c

08004400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004404:	f000 f9de 	bl	80047c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11d      	bne.n	800444c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004410:	4811      	ldr	r0, [pc, #68]	; (8004458 <prvCheckForValidListAndQueue+0x58>)
 8004412:	f7fd ff73 	bl	80022fc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004416:	4811      	ldr	r0, [pc, #68]	; (800445c <prvCheckForValidListAndQueue+0x5c>)
 8004418:	f7fd ff70 	bl	80022fc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <prvCheckForValidListAndQueue+0x60>)
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <prvCheckForValidListAndQueue+0x58>)
 8004420:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <prvCheckForValidListAndQueue+0x64>)
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <prvCheckForValidListAndQueue+0x5c>)
 8004426:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004428:	2200      	movs	r2, #0
 800442a:	210c      	movs	r1, #12
 800442c:	200a      	movs	r0, #10
 800442e:	f7fe f8a9 	bl	8002584 <xQueueGenericCreate>
 8004432:	4603      	mov	r3, r0
 8004434:	4a07      	ldr	r2, [pc, #28]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 8004436:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4908      	ldr	r1, [pc, #32]	; (8004468 <prvCheckForValidListAndQueue+0x68>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fab2 	bl	80029b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800444c:	f000 f9ea 	bl	8004824 <vPortExitCritical>
    }
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000250 	.word	0x20000250
 8004458:	20000220 	.word	0x20000220
 800445c:	20000234 	.word	0x20000234
 8004460:	20000248 	.word	0x20000248
 8004464:	2000024c 	.word	0x2000024c
 8004468:	08006b64 	.word	0x08006b64

0800446c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b04      	subs	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004484:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b04      	subs	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b04      	subs	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800449c:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <pxPortInitialiseStack+0x64>)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b14      	subs	r3, #20
 80044a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f06f 0202 	mvn.w	r2, #2
 80044ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b20      	subs	r3, #32
 80044c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	080044d5 	.word	0x080044d5

080044d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <prvTaskExitError+0x54>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d00a      	beq.n	80044fe <prvTaskExitError+0x2a>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <prvTaskExitError+0x28>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60bb      	str	r3, [r7, #8]
    }
 8004510:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004512:	bf00      	nop
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0fc      	beq.n	8004514 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000010 	.word	0x20000010
 800452c:	00000000 	.word	0x00000000

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	4770      	bx	lr
 800454c:	f3af 8000 	nop.w

08004550 <pxCurrentTCBConst2>:
 8004550:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <prvPortStartFirstTask+0x24>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8814 	msr	CONTROL, r0
 800456a:	b662      	cpsie	i
 800456c:	b661      	cpsie	f
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	df00      	svc	0
 8004578:	bf00      	nop
 800457a:	0000      	.short	0x0000
 800457c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop

08004584 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800458a:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <xPortStartScheduler+0x120>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a46      	ldr	r2, [pc, #280]	; (80046a8 <xPortStartScheduler+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10a      	bne.n	80045aa <xPortStartScheduler+0x26>
        __asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
    }
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <xPortStartScheduler+0x120>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <xPortStartScheduler+0x128>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10a      	bne.n	80045ca <xPortStartScheduler+0x46>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60fb      	str	r3, [r7, #12]
    }
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xPortStartScheduler+0x12c>)
 80045cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <xPortStartScheduler+0x130>)
 80045f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <xPortStartScheduler+0x134>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f8:	e009      	b.n	800460e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <xPortStartScheduler+0x134>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3b01      	subs	r3, #1
 8004600:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <xPortStartScheduler+0x134>)
 8004602:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d0ef      	beq.n	80045fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <xPortStartScheduler+0x134>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1c3 0307 	rsb	r3, r3, #7
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00a      	beq.n	800463c <xPortStartScheduler+0xb8>
        __asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
    }
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <xPortStartScheduler+0x134>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <xPortStartScheduler+0x134>)
 8004644:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <xPortStartScheduler+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <xPortStartScheduler+0x134>)
 8004650:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800465a:	4b18      	ldr	r3, [pc, #96]	; (80046bc <xPortStartScheduler+0x138>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <xPortStartScheduler+0x138>)
 8004660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004664:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <xPortStartScheduler+0x138>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <xPortStartScheduler+0x138>)
 800466c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004672:	f000 f963 	bl	800493c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <xPortStartScheduler+0x13c>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800467c:	f000 f982 	bl	8004984 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <xPortStartScheduler+0x140>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <xPortStartScheduler+0x140>)
 8004686:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800468c:	f7ff ff64 	bl	8004558 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004690:	f7fe fefa 	bl	8003488 <vTaskSwitchContext>
    prvTaskExitError();
 8004694:	f7ff ff1e 	bl	80044d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000ed00 	.word	0xe000ed00
 80046a8:	410fc271 	.word	0x410fc271
 80046ac:	410fc270 	.word	0x410fc270
 80046b0:	e000e400 	.word	0xe000e400
 80046b4:	2000025c 	.word	0x2000025c
 80046b8:	20000260 	.word	0x20000260
 80046bc:	e000ed20 	.word	0xe000ed20
 80046c0:	20000010 	.word	0x20000010
 80046c4:	e000ef34 	.word	0xe000ef34

080046c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <vInitPrioGroupValue+0xe4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <vInitPrioGroupValue+0xe8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10a      	bne.n	80046ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
    }
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <vInitPrioGroupValue+0xe4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a30      	ldr	r2, [pc, #192]	; (80047b4 <vInitPrioGroupValue+0xec>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10a      	bne.n	800470e <vInitPrioGroupValue+0x46>
        __asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
    }
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <vInitPrioGroupValue+0xf0>)
 8004710:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <vInitPrioGroupValue+0xf4>)
 8004734:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004738:	2207      	movs	r2, #7
 800473a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473c:	e009      	b.n	8004752 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004746:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d0ef      	beq.n	800473e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00a      	beq.n	8004780 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60bb      	str	r3, [r7, #8]
    }
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004788:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004792:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004794:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000ed00 	.word	0xe000ed00
 80047b0:	410fc271 	.word	0x410fc271
 80047b4:	410fc270 	.word	0x410fc270
 80047b8:	e000e400 	.word	0xe000e400
 80047bc:	2000025c 	.word	0x2000025c
 80047c0:	20000260 	.word	0x20000260

080047c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
        __asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
    }
 80047dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <vPortEnterCritical+0x58>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x58>)
 80047e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10f      	bne.n	8004810 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <vPortEnterCritical+0x4c>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x4a>
    }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000010 	.word	0x20000010
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <vPortExitCritical+0x50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortExitCritical+0x24>
        __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
    }
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vPortExitCritical+0x50>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortExitCritical+0x50>)
 8004850:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <vPortExitCritical+0x42>
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f383 8811 	msr	BASEPRI, r3
    }
 8004864:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000010 	.word	0x20000010
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f7fe fdea 	bl	8003488 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
        __asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
    }
 8004900:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004902:	f001 fe0d 	bl	8006520 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004906:	f7fe fca5 	bl	8003254 <xTaskIncrementTick>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004910:	f001 fe64 	bl	80065dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <SysTick_Handler+0x50>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e001      	b.n	8004922 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800491e:	f001 fe41 	bl	80065a4 <SEGGER_SYSVIEW_RecordExitISR>
 8004922:	2300      	movs	r3, #0
 8004924:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f383 8811 	msr	BASEPRI, r3
    }
 800492c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <vPortSetupTimerInterrupt+0x38>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vPortSetupTimerInterrupt+0x3c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <vPortSetupTimerInterrupt+0x40>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <vPortSetupTimerInterrupt+0x44>)
 800495a:	3b01      	subs	r3, #1
 800495c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010
 8004974:	e000e018 	.word	0xe000e018
 8004978:	20000000 	.word	0x20000000
 800497c:	10624dd3 	.word	0x10624dd3
 8004980:	e000e014 	.word	0xe000e014

08004984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004994 <vPortEnableVFP+0x10>
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800498e:	6001      	str	r1, [r0, #0]
 8004990:	4770      	bx	lr
 8004992:	0000      	.short	0x0000
 8004994:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop

0800499c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049a2:	f3ef 8305 	mrs	r3, IPSR
 80049a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d914      	bls.n	80049d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <vPortValidateInterruptPriority+0x70>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <vPortValidateInterruptPriority+0x74>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	7afa      	ldrb	r2, [r7, #11]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20a      	bcs.n	80049d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
    }
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <vPortValidateInterruptPriority+0x78>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <vPortValidateInterruptPriority+0x7c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d90a      	bls.n	80049fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	603b      	str	r3, [r7, #0]
    }
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <vPortValidateInterruptPriority+0x60>
    }
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e3f0 	.word	0xe000e3f0
 8004a10:	2000025c 	.word	0x2000025c
 8004a14:	e000ed0c 	.word	0xe000ed0c
 8004a18:	20000260 	.word	0x20000260

08004a1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a28:	f7fe fae4 	bl	8002ff4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a2c:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <pvPortMalloc+0x160>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a34:	f000 f908 	bl	8004c48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a3e:	2208      	movs	r2, #8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	3308      	adds	r3, #8
 8004a4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d804      	bhi.n	8004a60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e001      	b.n	8004a64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db70      	blt.n	8004b4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06d      	beq.n	8004b4c <pvPortMalloc+0x130>
 8004a70:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <pvPortMalloc+0x164>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d868      	bhi.n	8004b4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a7a:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <pvPortMalloc+0x168>)
 8004a7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <pvPortMalloc+0x168>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a84:	e004      	b.n	8004a90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <pvPortMalloc+0x86>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f1      	bne.n	8004a86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004aa2:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <pvPortMalloc+0x160>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d04f      	beq.n	8004b4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4413      	add	r3, r2
 8004ab4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d91f      	bls.n	8004b0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <pvPortMalloc+0xda>
        __asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
    }
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 f8f9 	bl	8004d00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <pvPortMalloc+0x164>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <pvPortMalloc+0x164>)
 8004b1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <pvPortMalloc+0x164>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <pvPortMalloc+0x16c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d203      	bcs.n	8004b30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pvPortMalloc+0x164>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <pvPortMalloc+0x16c>)
 8004b2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <pvPortMalloc+0x170>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <pvPortMalloc+0x170>)
 8004b4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b4c:	f7fe fa60 	bl	8003010 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <pvPortMalloc+0x154>
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
    }
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <pvPortMalloc+0x152>
    return pvReturn;
 8004b70:	69fb      	ldr	r3, [r7, #28]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20012e6c 	.word	0x20012e6c
 8004b80:	20012e70 	.word	0x20012e70
 8004b84:	20012e64 	.word	0x20012e64
 8004b88:	20012e74 	.word	0x20012e74
 8004b8c:	20012e78 	.word	0x20012e78

08004b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d049      	beq.n	8004c36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4413      	add	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <vPortFree+0x3e>
        __asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
    }
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <vPortFree+0x5c>
        __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
    }
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0fdb      	lsrs	r3, r3, #31
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d118      	bne.n	8004c36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c10:	f7fe f9f0 	bl	8002ff4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <vPortFree+0xb0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <vPortFree+0xb0>)
 8004c20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f000 f86c 	bl	8004d00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <vPortFree+0xb4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <vPortFree+0xb4>)
 8004c30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c32:	f7fe f9ed 	bl	8003010 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20012e70 	.word	0x20012e70
 8004c44:	20012e7c 	.word	0x20012e7c

08004c48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <prvHeapInit+0xa4>)
 8004c56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3307      	adds	r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <prvHeapInit+0xa4>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <prvHeapInit+0xa8>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <prvHeapInit+0xa8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c94:	2208      	movs	r2, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <prvHeapInit+0xac>)
 8004ca8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <prvHeapInit+0xac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <prvHeapInit+0xac>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <prvHeapInit+0xac>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <prvHeapInit+0xb0>)
 8004cd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <prvHeapInit+0xb4>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20000264 	.word	0x20000264
 8004cf0:	20012e64 	.word	0x20012e64
 8004cf4:	20012e6c 	.word	0x20012e6c
 8004cf8:	20012e74 	.word	0x20012e74
 8004cfc:	20012e70 	.word	0x20012e70

08004d00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d08:	4b28      	ldr	r3, [pc, #160]	; (8004dac <prvInsertBlockIntoFreeList+0xac>)
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e002      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x14>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d8f7      	bhi.n	8004d0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d108      	bne.n	8004d42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d118      	bne.n	8004d88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d00d      	beq.n	8004d7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e008      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e003      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d002      	beq.n	8004d9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20012e64 	.word	0x20012e64
 8004db0:	20012e6c 	.word	0x20012e6c

08004db4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004db8:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <_cbSendSystemDesc+0x14>)
 8004dba:	f001 fb5b 	bl	8006474 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dbe:	4803      	ldr	r0, [pc, #12]	; (8004dcc <_cbSendSystemDesc+0x18>)
 8004dc0:	f001 fb58 	bl	8006474 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08006b6c 	.word	0x08006b6c
 8004dcc:	08006bb0 	.word	0x08006bb0

08004dd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dde:	4a06      	ldr	r2, [pc, #24]	; (8004df8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004de0:	f000 fe18 	bl	8005a14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004de4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004de8:	f000 fe58 	bl	8005a9c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000000 	.word	0x20000000
 8004df4:	08004db5 	.word	0x08004db5
 8004df8:	08006c4c 	.word	0x08006c4c

08004dfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e033      	b.n	8004e70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e08:	491e      	ldr	r1, [pc, #120]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	4c16      	ldr	r4, [pc, #88]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4423      	add	r3, r4
 8004e38:	3308      	adds	r3, #8
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	4d11      	ldr	r5, [pc, #68]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	442b      	add	r3, r5
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	4e0d      	ldr	r6, [pc, #52]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4433      	add	r3, r6
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462b      	mov	r3, r5
 8004e64:	4622      	mov	r2, r4
 8004e66:	f000 f979 	bl	800515c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <_cbSendTaskList+0x8c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3c6      	bcc.n	8004e08 <_cbSendTaskList+0xc>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	20012e80 	.word	0x20012e80
 8004e88:	20012f20 	.word	0x20012f20

08004e8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e94:	f7fe f9cc 	bl	8003230 <xTaskGetTickCountFromISR>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	4693      	mov	fp, r2
 8004ea0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	f04f 0a00 	mov.w	sl, #0
 8004eb0:	f04f 0b00 	mov.w	fp, #0
 8004eb4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004eb8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ebc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	1a14      	subs	r4, r2, r0
 8004ec6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	00ab      	lsls	r3, r5, #2
 8004ed4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ed8:	00a2      	lsls	r2, r4, #2
 8004eda:	4614      	mov	r4, r2
 8004edc:	461d      	mov	r5, r3
 8004ede:	eb14 0800 	adds.w	r8, r4, r0
 8004ee2:	eb45 0901 	adc.w	r9, r5, r1
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efa:	4690      	mov	r8, r2
 8004efc:	4699      	mov	r9, r3
 8004efe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f22:	2205      	movs	r2, #5
 8004f24:	492b      	ldr	r1, [pc, #172]	; (8004fd4 <SYSVIEW_AddTask+0xc0>)
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f001 fda8 	bl	8006a7c <memcmp>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04b      	beq.n	8004fca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b07      	cmp	r3, #7
 8004f38:	d903      	bls.n	8004f42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f3a:	4828      	ldr	r0, [pc, #160]	; (8004fdc <SYSVIEW_AddTask+0xc8>)
 8004f3c:	f001 fd42 	bl	80069c4 <SEGGER_SYSVIEW_Warn>
    return;
 8004f40:	e044      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4921      	ldr	r1, [pc, #132]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3304      	adds	r3, #4
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	330c      	adds	r3, #12
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3310      	adds	r3, #16
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f8ca 	bl	800515c <SYSVIEW_SendTaskInfo>
 8004fc8:	e000      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
    return;
 8004fca:	bf00      	nop

}
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08006bc0 	.word	0x08006bc0
 8004fd8:	20012f20 	.word	0x20012f20
 8004fdc:	08006bc8 	.word	0x08006bc8
 8004fe0:	20012e80 	.word	0x20012e80

08004fe4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004fec:	4b59      	ldr	r3, [pc, #356]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80ab 	beq.w	800514c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e00d      	b.n	8005018 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004ffc:	4956      	ldr	r1, [pc, #344]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d008      	beq.n	8005024 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3ec      	bcc.n	8004ffc <SYSVIEW_DeleteTask+0x18>
 8005022:	e000      	b.n	8005026 <SYSVIEW_DeleteTask+0x42>
      break;
 8005024:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005026:	4b4b      	ldr	r3, [pc, #300]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d111      	bne.n	8005056 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a46      	ldr	r2, [pc, #280]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 800503e:	4413      	add	r3, r2
 8005040:	2214      	movs	r2, #20
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fd29 	bl	8006a9c <memset>
    _NumTasks--;
 800504a:	4b42      	ldr	r3, [pc, #264]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	4a40      	ldr	r2, [pc, #256]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	e07b      	b.n	800514e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005056:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	429a      	cmp	r2, r3
 800505e:	d276      	bcs.n	800514e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005060:	4b3c      	ldr	r3, [pc, #240]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1e5a      	subs	r2, r3, #1
 8005066:	493c      	ldr	r1, [pc, #240]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	4838      	ldr	r0, [pc, #224]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4403      	add	r3, r0
 8005082:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005084:	4b33      	ldr	r3, [pc, #204]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1e5a      	subs	r2, r3, #1
 800508a:	4933      	ldr	r1, [pc, #204]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	3304      	adds	r3, #4
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	482f      	ldr	r0, [pc, #188]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4403      	add	r3, r0
 80050a8:	3304      	adds	r3, #4
 80050aa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80050ac:	4b29      	ldr	r3, [pc, #164]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	4929      	ldr	r1, [pc, #164]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3308      	adds	r3, #8
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	4825      	ldr	r0, [pc, #148]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4403      	add	r3, r0
 80050d0:	3308      	adds	r3, #8
 80050d2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	491f      	ldr	r1, [pc, #124]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	330c      	adds	r3, #12
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	481b      	ldr	r0, [pc, #108]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4403      	add	r3, r0
 80050f8:	330c      	adds	r3, #12
 80050fa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	4915      	ldr	r1, [pc, #84]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	3310      	adds	r3, #16
 8005110:	6819      	ldr	r1, [r3, #0]
 8005112:	4811      	ldr	r0, [pc, #68]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4403      	add	r3, r0
 8005120:	3310      	adds	r3, #16
 8005122:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <SYSVIEW_DeleteTask+0x174>)
 8005134:	4413      	add	r3, r2
 8005136:	2214      	movs	r2, #20
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f001 fcae 	bl	8006a9c <memset>
    _NumTasks--;
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3b01      	subs	r3, #1
 8005146:	4a03      	ldr	r2, [pc, #12]	; (8005154 <SYSVIEW_DeleteTask+0x170>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e000      	b.n	800514e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800514c:	bf00      	nop
  }
}
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20012f20 	.word	0x20012f20
 8005158:	20012e80 	.word	0x20012e80

0800515c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800516a:	f107 0314 	add.w	r3, r7, #20
 800516e:	2214      	movs	r2, #20
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fc92 	bl	8006a9c <memset>
  TaskInfo.TaskID     = TaskID;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4618      	mov	r0, r3
 8005192:	f001 f877 	bl	8006284 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005196:	bf00      	nop
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <_DoInit+0xa0>)
 80051a8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80051aa:	22a8      	movs	r2, #168	; 0xa8
 80051ac:	2100      	movs	r1, #0
 80051ae:	6838      	ldr	r0, [r7, #0]
 80051b0:	f001 fc74 	bl	8006a9c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2203      	movs	r2, #3
 80051b8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2203      	movs	r2, #3
 80051be:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4a20      	ldr	r2, [pc, #128]	; (8005244 <_DoInit+0xa4>)
 80051c4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <_DoInit+0xa8>)
 80051ca:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4a16      	ldr	r2, [pc, #88]	; (8005244 <_DoInit+0xa4>)
 80051ea:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <_DoInit+0xac>)
 80051f0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2210      	movs	r2, #16
 80051f6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800520a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e00c      	b.n	800522e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1c3 030f 	rsb	r3, r3, #15
 800521a:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <_DoInit+0xb0>)
 800521c:	5cd1      	ldrb	r1, [r2, r3]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	460a      	mov	r2, r1
 8005226:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3301      	adds	r3, #1
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d9ef      	bls.n	8005214 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005234:	f3bf 8f5f 	dmb	sy
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20012f24 	.word	0x20012f24
 8005244:	08006c18 	.word	0x08006c18
 8005248:	20012fcc 	.word	0x20012fcc
 800524c:	200133cc 	.word	0x200133cc
 8005250:	08006c54 	.word	0x08006c54

08005254 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	; 0x30
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005260:	4b3e      	ldr	r3, [pc, #248]	; (800535c <SEGGER_RTT_ReadNoLock+0x108>)
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b53      	cmp	r3, #83	; 0x53
 800526c:	d001      	beq.n	8005272 <SEGGER_RTT_ReadNoLock+0x1e>
 800526e:	f7ff ff97 	bl	80051a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	3360      	adds	r3, #96	; 0x60
 800527e:	4a37      	ldr	r2, [pc, #220]	; (800535c <SEGGER_RTT_ReadNoLock+0x108>)
 8005280:	4413      	add	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005294:	2300      	movs	r3, #0
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	d92b      	bls.n	80052f8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bf28      	it	cs
 80052b2:	4613      	movcs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	4413      	add	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	6939      	ldr	r1, [r7, #16]
 80052c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c6:	f001 fc15 	bl	8006af4 <memcpy>
    NumBytesRead += NumBytesRem;
 80052ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d101      	bne.n	80052f8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4293      	cmp	r3, r2
 8005306:	bf28      	it	cs
 8005308:	4613      	movcs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d019      	beq.n	8005346 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	4413      	add	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005322:	f001 fbe7 	bl	8006af4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800533e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005350:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005354:	4618      	mov	r0, r3
 8005356:	3730      	adds	r7, #48	; 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20012f24 	.word	0x20012f24

08005360 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800536e:	4b3d      	ldr	r3, [pc, #244]	; (8005464 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b53      	cmp	r3, #83	; 0x53
 800537a:	d001      	beq.n	8005380 <SEGGER_RTT_AllocUpBuffer+0x20>
 800537c:	f7ff ff10 	bl	80051a0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005380:	f3ef 8311 	mrs	r3, BASEPRI
 8005384:	f04f 0120 	mov.w	r1, #32
 8005388:	f381 8811 	msr	BASEPRI, r1
 800538c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005390:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3304      	adds	r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	dbeb      	blt.n	8005396 <SEGGER_RTT_AllocUpBuffer+0x36>
 80053be:	e000      	b.n	80053c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	da3f      	bge.n	800544c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80053cc:	6939      	ldr	r1, [r7, #16]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	440b      	add	r3, r1
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053e0:	6939      	ldr	r1, [r7, #16]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	4613      	mov	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	4413      	add	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	440b      	add	r3, r1
 80053f0:	3304      	adds	r3, #4
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053f6:	6939      	ldr	r1, [r7, #16]
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	3320      	adds	r3, #32
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	4613      	mov	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	440b      	add	r3, r1
 8005418:	3328      	adds	r3, #40	; 0x28
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800541e:	6939      	ldr	r1, [r7, #16]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005432:	6939      	ldr	r1, [r7, #16]
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	4613      	mov	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	440b      	add	r3, r1
 8005440:	332c      	adds	r3, #44	; 0x2c
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005446:	f3bf 8f5f 	dmb	sy
 800544a:	e002      	b.n	8005452 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800544c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005450:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005458:	69fb      	ldr	r3, [r7, #28]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20012f24 	.word	0x20012f24

08005468 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b53      	cmp	r3, #83	; 0x53
 8005482:	d001      	beq.n	8005488 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005484:	f7ff fe8c 	bl	80051a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005488:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800548a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d82c      	bhi.n	80054ec <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005492:	f3ef 8311 	mrs	r3, BASEPRI
 8005496:	f04f 0120 	mov.w	r1, #32
 800549a:	f381 8811 	msr	BASEPRI, r1
 800549e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	3360      	adds	r3, #96	; 0x60
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054da:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	e002      	b.n	80054f2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3728      	adds	r7, #40	; 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20012f24 	.word	0x20012f24

08005500 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	60fa      	str	r2, [r7, #12]
 8005516:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d90a      	bls.n	8005534 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005522:	e007      	b.n	8005534 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	1c53      	adds	r3, r2, #1
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	60f9      	str	r1, [r7, #12]
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <_EncodeStr+0x46>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1ee      	bne.n	8005524 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	b2da      	uxtb	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3307      	adds	r3, #7
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800557e:	4b34      	ldr	r3, [pc, #208]	; (8005650 <_HandleIncomingPacket+0xd8>)
 8005580:	7e1b      	ldrb	r3, [r3, #24]
 8005582:	4618      	mov	r0, r3
 8005584:	1cfb      	adds	r3, r7, #3
 8005586:	2201      	movs	r2, #1
 8005588:	4619      	mov	r1, r3
 800558a:	f7ff fe63 	bl	8005254 <SEGGER_RTT_ReadNoLock>
 800558e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d057      	beq.n	8005646 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d031      	beq.n	8005600 <_HandleIncomingPacket+0x88>
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	dc40      	bgt.n	8005622 <_HandleIncomingPacket+0xaa>
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	dc15      	bgt.n	80055d0 <_HandleIncomingPacket+0x58>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd3c      	ble.n	8005622 <_HandleIncomingPacket+0xaa>
 80055a8:	3b01      	subs	r3, #1
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d839      	bhi.n	8005622 <_HandleIncomingPacket+0xaa>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <_HandleIncomingPacket+0x3c>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055d7 	.word	0x080055d7
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e3 	.word	0x080055e3
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	080055fb 	.word	0x080055fb
 80055d0:	2b7f      	cmp	r3, #127	; 0x7f
 80055d2:	d033      	beq.n	800563c <_HandleIncomingPacket+0xc4>
 80055d4:	e025      	b.n	8005622 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80055d6:	f000 fcdb 	bl	8005f90 <SEGGER_SYSVIEW_Start>
      break;
 80055da:	e034      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80055dc:	f000 fd92 	bl	8006104 <SEGGER_SYSVIEW_Stop>
      break;
 80055e0:	e031      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80055e2:	f000 ff6b 	bl	80064bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80055e6:	e02e      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80055e8:	f000 ff30 	bl	800644c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80055ec:	e02b      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80055ee:	f000 fdaf 	bl	8006150 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80055f2:	e028      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80055f4:	f001 f9a8 	bl	8006948 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80055f8:	e025      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80055fa:	f001 f987 	bl	800690c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80055fe:	e022      	b.n	8005646 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005600:	4b13      	ldr	r3, [pc, #76]	; (8005650 <_HandleIncomingPacket+0xd8>)
 8005602:	7e1b      	ldrb	r3, [r3, #24]
 8005604:	4618      	mov	r0, r3
 8005606:	1cfb      	adds	r3, r7, #3
 8005608:	2201      	movs	r2, #1
 800560a:	4619      	mov	r1, r3
 800560c:	f7ff fe22 	bl	8005254 <SEGGER_RTT_ReadNoLock>
 8005610:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	4618      	mov	r0, r3
 800561c:	f001 f8ec 	bl	80067f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005620:	e00e      	b.n	8005640 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	b25b      	sxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	da0c      	bge.n	8005644 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <_HandleIncomingPacket+0xd8>)
 800562c:	7e1b      	ldrb	r3, [r3, #24]
 800562e:	4618      	mov	r0, r3
 8005630:	1cfb      	adds	r3, r7, #3
 8005632:	2201      	movs	r2, #1
 8005634:	4619      	mov	r1, r3
 8005636:	f7ff fe0d 	bl	8005254 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800563a:	e003      	b.n	8005644 <_HandleIncomingPacket+0xcc>
      break;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <_HandleIncomingPacket+0xce>
      break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <_HandleIncomingPacket+0xce>
      break;
 8005644:	bf00      	nop
    }
  }
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	200143e4 	.word	0x200143e4

08005654 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800565a:	2301      	movs	r3, #1
 800565c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005668:	4b31      	ldr	r3, [pc, #196]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
 800566e:	e00b      	b.n	8005688 <_TrySendOverflowPacket+0x34>
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	62f9      	str	r1, [r7, #44]	; 0x2c
 800567a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	09db      	lsrs	r3, r3, #7
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b7f      	cmp	r3, #127	; 0x7f
 800568c:	d8f0      	bhi.n	8005670 <_TrySendOverflowPacket+0x1c>
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569e:	4b25      	ldr	r3, [pc, #148]	; (8005734 <_TrySendOverflowPacket+0xe0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a4:	4b22      	ldr	r3, [pc, #136]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e00b      	b.n	80056d0 <_TrySendOverflowPacket+0x7c>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6279      	str	r1, [r7, #36]	; 0x24
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <_TrySendOverflowPacket+0x64>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	627a      	str	r2, [r7, #36]	; 0x24
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	4618      	mov	r0, r3
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7fa fd6a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056fc:	4603      	mov	r3, r0
 80056fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e004      	b.n	8005724 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	3301      	adds	r3, #1
 8005720:	4a03      	ldr	r2, [pc, #12]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005722:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005724:	693b      	ldr	r3, [r7, #16]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3730      	adds	r7, #48	; 0x30
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200143e4 	.word	0x200143e4
 8005734:	e0001004 	.word	0xe0001004

08005738 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005744:	4b98      	ldr	r3, [pc, #608]	; (80059a8 <_SendPacket+0x270>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d010      	beq.n	800576e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800574c:	4b96      	ldr	r3, [pc, #600]	; (80059a8 <_SendPacket+0x270>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 812d 	beq.w	80059b0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005756:	4b94      	ldr	r3, [pc, #592]	; (80059a8 <_SendPacket+0x270>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d109      	bne.n	8005772 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800575e:	f7ff ff79 	bl	8005654 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005762:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <_SendPacket+0x270>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 8124 	bne.w	80059b4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800576c:	e001      	b.n	8005772 <_SendPacket+0x3a>
    goto Send;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <_SendPacket+0x3c>
Send:
 8005772:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d809      	bhi.n	800578e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800577a:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <_SendPacket+0x270>)
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 8115 	bne.w	80059b8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b17      	cmp	r3, #23
 8005792:	d807      	bhi.n	80057a4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b01      	subs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e0c4      	b.n	800592e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b7f      	cmp	r3, #127	; 0x7f
 80057b0:	d912      	bls.n	80057d8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	09da      	lsrs	r2, r3, #7
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e006      	b.n	80057e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b7e      	cmp	r3, #126	; 0x7e
 80057ea:	d807      	bhi.n	80057fc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e098      	b.n	800592e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005802:	d212      	bcs.n	800582a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	09da      	lsrs	r2, r3, #7
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b01      	subs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	3a01      	subs	r2, #1
 800581c:	60fa      	str	r2, [r7, #12]
 800581e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e081      	b.n	800592e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005830:	d21d      	bcs.n	800586e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0b9a      	lsrs	r2, r3, #14
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b01      	subs	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	b2db      	uxtb	r3, r3
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	3a01      	subs	r2, #1
 800584c:	60fa      	str	r2, [r7, #12]
 800584e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	3a01      	subs	r2, #1
 8005860:	60fa      	str	r2, [r7, #12]
 8005862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e05f      	b.n	800592e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005874:	d228      	bcs.n	80058c8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0d5a      	lsrs	r2, r3, #21
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b01      	subs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0b9b      	lsrs	r3, r3, #14
 800588a:	b2db      	uxtb	r3, r3
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	3a01      	subs	r2, #1
 8005890:	60fa      	str	r2, [r7, #12]
 8005892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	3a01      	subs	r2, #1
 80058a6:	60fa      	str	r2, [r7, #12]
 80058a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	3a01      	subs	r2, #1
 80058ba:	60fa      	str	r2, [r7, #12]
 80058bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e032      	b.n	800592e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0f1a      	lsrs	r2, r3, #28
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	0d5b      	lsrs	r3, r3, #21
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	3a01      	subs	r2, #1
 80058e2:	60fa      	str	r2, [r7, #12]
 80058e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0b9b      	lsrs	r3, r3, #14
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	3a01      	subs	r2, #1
 80058f8:	60fa      	str	r2, [r7, #12]
 80058fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	09db      	lsrs	r3, r3, #7
 8005908:	b2db      	uxtb	r3, r3
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	3a01      	subs	r2, #1
 800590e:	60fa      	str	r2, [r7, #12]
 8005910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	3a01      	subs	r2, #1
 8005922:	60fa      	str	r2, [r7, #12]
 8005924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005928:	b2da      	uxtb	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800592e:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <_SendPacket+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <_SendPacket+0x270>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	e00b      	b.n	8005960 <_SendPacket+0x228>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	6279      	str	r1, [r7, #36]	; 0x24
 8005952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	09db      	lsrs	r3, r3, #7
 800595e:	623b      	str	r3, [r7, #32]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b7f      	cmp	r3, #127	; 0x7f
 8005964:	d8f0      	bhi.n	8005948 <_SendPacket+0x210>
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	627a      	str	r2, [r7, #36]	; 0x24
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <_SendPacket+0x270>)
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	4618      	mov	r0, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	f7fa fc23 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800598a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <_SendPacket+0x270>)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	60d3      	str	r3, [r2, #12]
 8005998:	e00f      	b.n	80059ba <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800599a:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <_SendPacket+0x270>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <_SendPacket+0x270>)
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e008      	b.n	80059ba <_SendPacket+0x282>
 80059a8:	200143e4 	.word	0x200143e4
 80059ac:	e0001004 	.word	0xe0001004
    goto SendDone;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <_SendPacket+0x282>
      goto SendDone;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <_SendPacket+0x282>
      goto SendDone;
 80059b8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <_SendPacket+0x2d4>)
 80059bc:	7e1b      	ldrb	r3, [r3, #24]
 80059be:	4619      	mov	r1, r3
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <_SendPacket+0x2d8>)
 80059c2:	460b      	mov	r3, r1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	440b      	add	r3, r1
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	4413      	add	r3, r2
 80059cc:	336c      	adds	r3, #108	; 0x6c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <_SendPacket+0x2d4>)
 80059d2:	7e1b      	ldrb	r3, [r3, #24]
 80059d4:	4618      	mov	r0, r3
 80059d6:	490e      	ldr	r1, [pc, #56]	; (8005a10 <_SendPacket+0x2d8>)
 80059d8:	4603      	mov	r3, r0
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4403      	add	r3, r0
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	3370      	adds	r3, #112	; 0x70
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d00b      	beq.n	8005a02 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <_SendPacket+0x2d4>)
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d107      	bne.n	8005a02 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <_SendPacket+0x2d4>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059f8:	f7ff fdbe 	bl	8005578 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059fc:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <_SendPacket+0x2d4>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a02:	bf00      	nop
 8005a04:	3728      	adds	r7, #40	; 0x28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200143e4 	.word	0x200143e4
 8005a10:	20012f24 	.word	0x20012f24

08005a14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a22:	2300      	movs	r3, #0
 8005a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a28:	4917      	ldr	r1, [pc, #92]	; (8005a88 <SEGGER_SYSVIEW_Init+0x74>)
 8005a2a:	4818      	ldr	r0, [pc, #96]	; (8005a8c <SEGGER_SYSVIEW_Init+0x78>)
 8005a2c:	f7ff fc98 	bl	8005360 <SEGGER_RTT_AllocUpBuffer>
 8005a30:	4603      	mov	r3, r0
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a3a:	785a      	ldrb	r2, [r3, #1]
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a42:	7e1b      	ldrb	r3, [r3, #24]
 8005a44:	4618      	mov	r0, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <SEGGER_SYSVIEW_Init+0x80>)
 8005a4e:	490f      	ldr	r1, [pc, #60]	; (8005a8c <SEGGER_SYSVIEW_Init+0x78>)
 8005a50:	f7ff fd0a 	bl	8005468 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <SEGGER_SYSVIEW_Init+0x84>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a62:	4a0b      	ldr	r2, [pc, #44]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a68:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005a74:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200133dc 	.word	0x200133dc
 8005a8c:	08006c2c 	.word	0x08006c2c
 8005a90:	200143e4 	.word	0x200143e4
 8005a94:	200143dc 	.word	0x200143dc
 8005a98:	e0001004 	.word	0xe0001004

08005a9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6113      	str	r3, [r2, #16]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	200143e4 	.word	0x200143e4

08005abc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	f04f 0120 	mov.w	r1, #32
 8005acc:	f381 8811 	msr	BASEPRI, r1
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	4808      	ldr	r0, [pc, #32]	; (8005af4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ad4:	f7ff fd44 	bl	8005560 <_PreparePacket>
 8005ad8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68b8      	ldr	r0, [r7, #8]
 8005ae0:	f7ff fe2a 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f383 8811 	msr	BASEPRI, r3
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20014414 	.word	0x20014414

08005af8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b02:	f3ef 8311 	mrs	r3, BASEPRI
 8005b06:	f04f 0120 	mov.w	r1, #32
 8005b0a:	f381 8811 	msr	BASEPRI, r1
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	4816      	ldr	r0, [pc, #88]	; (8005b6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b12:	f7ff fd25 	bl	8005560 <_PreparePacket>
 8005b16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e00b      	b.n	8005b3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	1c59      	adds	r1, r3, #1
 8005b2e:	61f9      	str	r1, [r7, #28]
 8005b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	09db      	lsrs	r3, r3, #7
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b7f      	cmp	r3, #127	; 0x7f
 8005b42:	d8f0      	bhi.n	8005b26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	61fa      	str	r2, [r7, #28]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	6938      	ldr	r0, [r7, #16]
 8005b5a:	f7ff fded 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f383 8811 	msr	BASEPRI, r3
}
 8005b64:	bf00      	nop
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20014414 	.word	0x20014414

08005b70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	; 0x30
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b80:	f04f 0120 	mov.w	r1, #32
 8005b84:	f381 8811 	msr	BASEPRI, r1
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	4825      	ldr	r0, [pc, #148]	; (8005c20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b8c:	f7ff fce8 	bl	8005560 <_PreparePacket>
 8005b90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9e:	e00b      	b.n	8005bb8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	09db      	lsrs	r3, r3, #7
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b7f      	cmp	r3, #127	; 0x7f
 8005bbc:	d8f0      	bhi.n	8005ba0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e00b      	b.n	8005bf0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	6279      	str	r1, [r7, #36]	; 0x24
 8005be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf4:	d8f0      	bhi.n	8005bd8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	6979      	ldr	r1, [r7, #20]
 8005c0a:	69b8      	ldr	r0, [r7, #24]
 8005c0c:	f7ff fd94 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f383 8811 	msr	BASEPRI, r3
}
 8005c16:	bf00      	nop
 8005c18:	3730      	adds	r7, #48	; 0x30
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20014414 	.word	0x20014414

08005c24 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c32:	f3ef 8311 	mrs	r3, BASEPRI
 8005c36:	f04f 0120 	mov.w	r1, #32
 8005c3a:	f381 8811 	msr	BASEPRI, r1
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	4832      	ldr	r0, [pc, #200]	; (8005d0c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c42:	f7ff fc8d 	bl	8005560 <_PreparePacket>
 8005c46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
 8005c54:	e00b      	b.n	8005c6e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	1c59      	adds	r1, r3, #1
 8005c5e:	6379      	str	r1, [r7, #52]	; 0x34
 8005c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	09db      	lsrs	r3, r3, #7
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2b7f      	cmp	r3, #127	; 0x7f
 8005c72:	d8f0      	bhi.n	8005c56 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	637a      	str	r2, [r7, #52]	; 0x34
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8c:	e00b      	b.n	8005ca6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	1c59      	adds	r1, r3, #1
 8005c96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	09db      	lsrs	r3, r3, #7
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8005caa:	d8f0      	bhi.n	8005c8e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	e00b      	b.n	8005cde <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1c59      	adds	r1, r3, #1
 8005cce:	6279      	str	r1, [r7, #36]	; 0x24
 8005cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce2:	d8f0      	bhi.n	8005cc6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	6979      	ldr	r1, [r7, #20]
 8005cf8:	69b8      	ldr	r0, [r7, #24]
 8005cfa:	f7ff fd1d 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f383 8811 	msr	BASEPRI, r3
}
 8005d04:	bf00      	nop
 8005d06:	3738      	adds	r7, #56	; 0x38
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20014414 	.word	0x20014414

08005d10 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b090      	sub	sp, #64	; 0x40
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d22:	f04f 0120 	mov.w	r1, #32
 8005d26:	f381 8811 	msr	BASEPRI, r1
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	4840      	ldr	r0, [pc, #256]	; (8005e30 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d2e:	f7ff fc17 	bl	8005560 <_PreparePacket>
 8005d32:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d40:	e00b      	b.n	8005d5a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d48:	1c59      	adds	r1, r3, #1
 8005d4a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5e:	d8f0      	bhi.n	8005d42 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
 8005d78:	e00b      	b.n	8005d92 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	1c59      	adds	r1, r3, #1
 8005d82:	6379      	str	r1, [r7, #52]	; 0x34
 8005d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	09db      	lsrs	r3, r3, #7
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b7f      	cmp	r3, #127	; 0x7f
 8005d96:	d8f0      	bhi.n	8005d7a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db0:	e00b      	b.n	8005dca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	1c59      	adds	r1, r3, #1
 8005dba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	09db      	lsrs	r3, r3, #7
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dce:	d8f0      	bhi.n	8005db2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
 8005de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	e00b      	b.n	8005e02 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	6279      	str	r1, [r7, #36]	; 0x24
 8005df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	09db      	lsrs	r3, r3, #7
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	2b7f      	cmp	r3, #127	; 0x7f
 8005e06:	d8f0      	bhi.n	8005dea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	69b8      	ldr	r0, [r7, #24]
 8005e1e:	f7ff fc8b 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f383 8811 	msr	BASEPRI, r3
}
 8005e28:	bf00      	nop
 8005e2a:	3740      	adds	r7, #64	; 0x40
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20014414 	.word	0x20014414

08005e34 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b092      	sub	sp, #72	; 0x48
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e42:	f3ef 8311 	mrs	r3, BASEPRI
 8005e46:	f04f 0120 	mov.w	r1, #32
 8005e4a:	f381 8811 	msr	BASEPRI, r1
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	484e      	ldr	r0, [pc, #312]	; (8005f8c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8005e52:	f7ff fb85 	bl	8005560 <_PreparePacket>
 8005e56:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
 8005e64:	e00b      	b.n	8005e7e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8005e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	6479      	str	r1, [r7, #68]	; 0x44
 8005e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7a:	09db      	lsrs	r3, r3, #7
 8005e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e80:	2b7f      	cmp	r3, #127	; 0x7f
 8005e82:	d8f0      	bhi.n	8005e66 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	647a      	str	r2, [r7, #68]	; 0x44
 8005e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9c:	e00b      	b.n	8005eb6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eba:	d8f0      	bhi.n	8005e9e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed4:	e00b      	b.n	8005eee <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	6379      	str	r1, [r7, #52]	; 0x34
 8005ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	633b      	str	r3, [r7, #48]	; 0x30
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d8f0      	bhi.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	637a      	str	r2, [r7, #52]	; 0x34
 8005efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0c:	e00b      	b.n	8005f26 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	09db      	lsrs	r3, r3, #7
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2a:	d8f0      	bhi.n	8005f0e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	e00b      	b.n	8005f5e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1c59      	adds	r1, r3, #1
 8005f4e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b7f      	cmp	r3, #127	; 0x7f
 8005f62:	d8f0      	bhi.n	8005f46 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	627a      	str	r2, [r7, #36]	; 0x24
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	69b8      	ldr	r0, [r7, #24]
 8005f7a:	f7ff fbdd 	bl	8005738 <_SendPacket>
  RECORD_END();
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f383 8811 	msr	BASEPRI, r3
}
 8005f84:	bf00      	nop
 8005f86:	3748      	adds	r7, #72	; 0x48
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20014414 	.word	0x20014414

08005f90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005f96:	4b58      	ldr	r3, [pc, #352]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa0:	f04f 0120 	mov.w	r1, #32
 8005fa4:	f381 8811 	msr	BASEPRI, r1
 8005fa8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005faa:	4b53      	ldr	r3, [pc, #332]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4952      	ldr	r1, [pc, #328]	; (80060fc <SEGGER_SYSVIEW_Start+0x16c>)
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa f90c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fbe:	200a      	movs	r0, #10
 8005fc0:	f7ff fd7c 	bl	8005abc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc8:	f04f 0120 	mov.w	r1, #32
 8005fcc:	f381 8811 	msr	BASEPRI, r1
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	484b      	ldr	r0, [pc, #300]	; (8006100 <SEGGER_SYSVIEW_Start+0x170>)
 8005fd4:	f7ff fac4 	bl	8005560 <_PreparePacket>
 8005fd8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	4b45      	ldr	r3, [pc, #276]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_Start+0x72>
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_Start+0x5a>
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	e00b      	b.n	800603c <SEGGER_SYSVIEW_Start+0xac>
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	6279      	str	r1, [r7, #36]	; 0x24
 800602e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b7f      	cmp	r3, #127	; 0x7f
 8006040:	d8f0      	bhi.n	8006024 <SEGGER_SYSVIEW_Start+0x94>
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	627a      	str	r2, [r7, #36]	; 0x24
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e00b      	b.n	8006076 <SEGGER_SYSVIEW_Start+0xe6>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	61f9      	str	r1, [r7, #28]
 8006068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	d8f0      	bhi.n	800605e <SEGGER_SYSVIEW_Start+0xce>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	61fa      	str	r2, [r7, #28]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e00b      	b.n	80060ae <SEGGER_SYSVIEW_Start+0x11e>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	6179      	str	r1, [r7, #20]
 80060a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b7f      	cmp	r3, #127	; 0x7f
 80060b2:	d8f0      	bhi.n	8006096 <SEGGER_SYSVIEW_Start+0x106>
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	617a      	str	r2, [r7, #20]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060c4:	2218      	movs	r2, #24
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fb35 	bl	8005738 <_SendPacket>
      RECORD_END();
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060d4:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <SEGGER_SYSVIEW_Start+0x168>)
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80060e2:	f000 f9eb 	bl	80064bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80060e6:	f000 f9b1 	bl	800644c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80060ea:	f000 fc2d 	bl	8006948 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80060ee:	bf00      	nop
 80060f0:	3730      	adds	r7, #48	; 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200143e4 	.word	0x200143e4
 80060fc:	08006c68 	.word	0x08006c68
 8006100:	20014414 	.word	0x20014414

08006104 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800610a:	f3ef 8311 	mrs	r3, BASEPRI
 800610e:	f04f 0120 	mov.w	r1, #32
 8006112:	f381 8811 	msr	BASEPRI, r1
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	480b      	ldr	r0, [pc, #44]	; (8006148 <SEGGER_SYSVIEW_Stop+0x44>)
 800611a:	f7ff fa21 	bl	8005560 <_PreparePacket>
 800611e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <SEGGER_SYSVIEW_Stop+0x48>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006128:	220b      	movs	r2, #11
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	f7ff fb03 	bl	8005738 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <SEGGER_SYSVIEW_Stop+0x48>)
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20014414 	.word	0x20014414
 800614c:	200143e4 	.word	0x200143e4

08006150 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006156:	f3ef 8311 	mrs	r3, BASEPRI
 800615a:	f04f 0120 	mov.w	r1, #32
 800615e:	f381 8811 	msr	BASEPRI, r1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	4845      	ldr	r0, [pc, #276]	; (800627c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006166:	f7ff f9fb 	bl	8005560 <_PreparePacket>
 800616a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006174:	4b42      	ldr	r3, [pc, #264]	; (8006280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
 800617a:	e00b      	b.n	8006194 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	2b7f      	cmp	r3, #127	; 0x7f
 8006198:	d8f0      	bhi.n	800617c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
 80061ae:	4b34      	ldr	r3, [pc, #208]	; (8006280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	6279      	str	r1, [r7, #36]	; 0x24
 80061c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2b7f      	cmp	r3, #127	; 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	627a      	str	r2, [r7, #36]	; 0x24
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e00b      	b.n	8006208 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	61f9      	str	r1, [r7, #28]
 80061fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	09db      	lsrs	r3, r3, #7
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b7f      	cmp	r3, #127	; 0x7f
 800620c:	d8f0      	bhi.n	80061f0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61fa      	str	r2, [r7, #28]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e00b      	b.n	8006240 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1c59      	adds	r1, r3, #1
 8006230:	6179      	str	r1, [r7, #20]
 8006232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	09db      	lsrs	r3, r3, #7
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b7f      	cmp	r3, #127	; 0x7f
 8006244:	d8f0      	bhi.n	8006228 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	617a      	str	r2, [r7, #20]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006256:	2218      	movs	r2, #24
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	68b8      	ldr	r0, [r7, #8]
 800625c:	f7ff fa6c 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	4798      	blx	r3
  }
}
 8006274:	bf00      	nop
 8006276:	3730      	adds	r7, #48	; 0x30
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20014414 	.word	0x20014414
 8006280:	200143e4 	.word	0x200143e4

08006284 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b092      	sub	sp, #72	; 0x48
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	f04f 0120 	mov.w	r1, #32
 8006294:	f381 8811 	msr	BASEPRI, r1
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	486a      	ldr	r0, [pc, #424]	; (8006444 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800629c:	f7ff f960 	bl	8005560 <_PreparePacket>
 80062a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b66      	ldr	r3, [pc, #408]	; (8006448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
 80062b6:	e00b      	b.n	80062d0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	6479      	str	r1, [r7, #68]	; 0x44
 80062c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	2b7f      	cmp	r3, #127	; 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	647a      	str	r2, [r7, #68]	; 0x44
 80062dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f0:	e00b      	b.n	800630a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	2b7f      	cmp	r3, #127	; 0x7f
 800630e:	d8f0      	bhi.n	80062f2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	4619      	mov	r1, r3
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff f8e9 	bl	8005500 <_EncodeStr>
 800632e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006330:	2209      	movs	r2, #9
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	6938      	ldr	r0, [r7, #16]
 8006336:	f7ff f9ff 	bl	8005738 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b40      	ldr	r3, [pc, #256]	; (8006448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
 800634e:	e00b      	b.n	8006368 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	b2da      	uxtb	r2, r3
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	6379      	str	r1, [r7, #52]	; 0x34
 800635a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	09db      	lsrs	r3, r3, #7
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2b7f      	cmp	r3, #127	; 0x7f
 800636c:	d8f0      	bhi.n	8006350 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	637a      	str	r2, [r7, #52]	; 0x34
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
 8006388:	e00b      	b.n	80063a2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d8f0      	bhi.n	800638a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	623b      	str	r3, [r7, #32]
 80063c2:	e00b      	b.n	80063dc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	6279      	str	r1, [r7, #36]	; 0x24
 80063ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	09db      	lsrs	r3, r3, #7
 80063da:	623b      	str	r3, [r7, #32]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b7f      	cmp	r3, #127	; 0x7f
 80063e0:	d8f0      	bhi.n	80063c4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	627a      	str	r2, [r7, #36]	; 0x24
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e00b      	b.n	8006414 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	61f9      	str	r1, [r7, #28]
 8006406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	09db      	lsrs	r3, r3, #7
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b7f      	cmp	r3, #127	; 0x7f
 8006418:	d8f0      	bhi.n	80063fc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	61fa      	str	r2, [r7, #28]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800642a:	2215      	movs	r2, #21
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	6938      	ldr	r0, [r7, #16]
 8006430:	f7ff f982 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f383 8811 	msr	BASEPRI, r3
}
 800643a:	bf00      	nop
 800643c:	3748      	adds	r7, #72	; 0x48
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20014414 	.word	0x20014414
 8006448:	200143e4 	.word	0x200143e4

0800644c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006462:	4b03      	ldr	r3, [pc, #12]	; (8006470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4798      	blx	r3
  }
}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200143e4 	.word	0x200143e4

08006474 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	f04f 0120 	mov.w	r1, #32
 8006484:	f381 8811 	msr	BASEPRI, r1
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	480b      	ldr	r0, [pc, #44]	; (80064b8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800648c:	f7ff f868 	bl	8005560 <_PreparePacket>
 8006490:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	6938      	ldr	r0, [r7, #16]
 8006498:	f7ff f832 	bl	8005500 <_EncodeStr>
 800649c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800649e:	220e      	movs	r2, #14
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	f7ff f948 	bl	8005738 <_SendPacket>
  RECORD_END();
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20014414 	.word	0x20014414

080064bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01a      	beq.n	8006500 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d015      	beq.n	8006500 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4798      	blx	r3
 80064dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064e0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80064e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	000a      	movs	r2, r1
 80064f0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064f2:	4613      	mov	r3, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4621      	mov	r1, r4
 80064f8:	200d      	movs	r0, #13
 80064fa:	f7ff fb39 	bl	8005b70 <SEGGER_SYSVIEW_RecordU32x2>
 80064fe:	e006      	b.n	800650e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4619      	mov	r1, r3
 8006506:	200c      	movs	r0, #12
 8006508:	f7ff faf6 	bl	8005af8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bd90      	pop	{r4, r7, pc}
 8006516:	bf00      	nop
 8006518:	200143e4 	.word	0x200143e4
 800651c:	e0001004 	.word	0xe0001004

08006520 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006526:	f3ef 8311 	mrs	r3, BASEPRI
 800652a:	f04f 0120 	mov.w	r1, #32
 800652e:	f381 8811 	msr	BASEPRI, r1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	4819      	ldr	r0, [pc, #100]	; (800659c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006536:	f7ff f813 	bl	8005560 <_PreparePacket>
 800653a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006548:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e00b      	b.n	800656c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	6179      	str	r1, [r7, #20]
 800655e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	09db      	lsrs	r3, r3, #7
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b7f      	cmp	r3, #127	; 0x7f
 8006570:	d8f0      	bhi.n	8006554 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	617a      	str	r2, [r7, #20]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006582:	2202      	movs	r2, #2
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	68b8      	ldr	r0, [r7, #8]
 8006588:	f7ff f8d6 	bl	8005738 <_SendPacket>
  RECORD_END();
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f383 8811 	msr	BASEPRI, r3
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20014414 	.word	0x20014414
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065aa:	f3ef 8311 	mrs	r3, BASEPRI
 80065ae:	f04f 0120 	mov.w	r1, #32
 80065b2:	f381 8811 	msr	BASEPRI, r1
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	4807      	ldr	r0, [pc, #28]	; (80065d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065ba:	f7fe ffd1 	bl	8005560 <_PreparePacket>
 80065be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065c0:	2203      	movs	r2, #3
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6838      	ldr	r0, [r7, #0]
 80065c6:	f7ff f8b7 	bl	8005738 <_SendPacket>
  RECORD_END();
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f383 8811 	msr	BASEPRI, r3
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20014414 	.word	0x20014414

080065dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065e2:	f3ef 8311 	mrs	r3, BASEPRI
 80065e6:	f04f 0120 	mov.w	r1, #32
 80065ea:	f381 8811 	msr	BASEPRI, r1
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	4807      	ldr	r0, [pc, #28]	; (8006610 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80065f2:	f7fe ffb5 	bl	8005560 <_PreparePacket>
 80065f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80065f8:	2212      	movs	r2, #18
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6838      	ldr	r0, [r7, #0]
 80065fe:	f7ff f89b 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f383 8811 	msr	BASEPRI, r3
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20014414 	.word	0x20014414

08006614 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800661a:	f3ef 8311 	mrs	r3, BASEPRI
 800661e:	f04f 0120 	mov.w	r1, #32
 8006622:	f381 8811 	msr	BASEPRI, r1
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	4807      	ldr	r0, [pc, #28]	; (8006648 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800662a:	f7fe ff99 	bl	8005560 <_PreparePacket>
 800662e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006630:	2211      	movs	r2, #17
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6838      	ldr	r0, [r7, #0]
 8006636:	f7ff f87f 	bl	8005738 <_SendPacket>
  RECORD_END();
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f383 8811 	msr	BASEPRI, r3
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20014414 	.word	0x20014414

0800664c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	4819      	ldr	r0, [pc, #100]	; (80066c8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006664:	f7fe ff7c 	bl	8005560 <_PreparePacket>
 8006668:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e00b      	b.n	800669a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	61f9      	str	r1, [r7, #28]
 800668c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	09db      	lsrs	r3, r3, #7
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b7f      	cmp	r3, #127	; 0x7f
 800669e:	d8f0      	bhi.n	8006682 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	61fa      	str	r2, [r7, #28]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066b0:	2208      	movs	r2, #8
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6938      	ldr	r0, [r7, #16]
 80066b6:	f7ff f83f 	bl	8005738 <_SendPacket>
  RECORD_END();
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f383 8811 	msr	BASEPRI, r3
}
 80066c0:	bf00      	nop
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20014414 	.word	0x20014414
 80066cc:	200143e4 	.word	0x200143e4

080066d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066d8:	f3ef 8311 	mrs	r3, BASEPRI
 80066dc:	f04f 0120 	mov.w	r1, #32
 80066e0:	f381 8811 	msr	BASEPRI, r1
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	4819      	ldr	r0, [pc, #100]	; (800674c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80066e8:	f7fe ff3a 	bl	8005560 <_PreparePacket>
 80066ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	e00b      	b.n	800671e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	1c59      	adds	r1, r3, #1
 800670e:	61f9      	str	r1, [r7, #28]
 8006710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	09db      	lsrs	r3, r3, #7
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b7f      	cmp	r3, #127	; 0x7f
 8006722:	d8f0      	bhi.n	8006706 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	61fa      	str	r2, [r7, #28]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006734:	2204      	movs	r2, #4
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6938      	ldr	r0, [r7, #16]
 800673a:	f7fe fffd 	bl	8005738 <_SendPacket>
  RECORD_END();
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f383 8811 	msr	BASEPRI, r3
}
 8006744:	bf00      	nop
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20014414 	.word	0x20014414
 8006750:	200143e4 	.word	0x200143e4

08006754 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800675c:	f3ef 8311 	mrs	r3, BASEPRI
 8006760:	f04f 0120 	mov.w	r1, #32
 8006764:	f381 8811 	msr	BASEPRI, r1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	4819      	ldr	r0, [pc, #100]	; (80067d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800676c:	f7fe fef8 	bl	8005560 <_PreparePacket>
 8006770:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006776:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	e00b      	b.n	80067a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	61f9      	str	r1, [r7, #28]
 8006794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	09db      	lsrs	r3, r3, #7
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b7f      	cmp	r3, #127	; 0x7f
 80067a6:	d8f0      	bhi.n	800678a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	61fa      	str	r2, [r7, #28]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067b8:	2206      	movs	r2, #6
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6938      	ldr	r0, [r7, #16]
 80067be:	f7fe ffbb 	bl	8005738 <_SendPacket>
  RECORD_END();
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f383 8811 	msr	BASEPRI, r3
}
 80067c8:	bf00      	nop
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20014414 	.word	0x20014414
 80067d4:	200143e4 	.word	0x200143e4

080067d8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	200143e4 	.word	0x200143e4

080067f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08c      	sub	sp, #48	; 0x30
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006802:	4b40      	ldr	r3, [pc, #256]	; (8006904 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d077      	beq.n	80068fa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800680a:	4b3e      	ldr	r3, [pc, #248]	; (8006904 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006810:	2300      	movs	r3, #0
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
 8006814:	e008      	b.n	8006828 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	3301      	adds	r3, #1
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682c:	429a      	cmp	r2, r3
 800682e:	d3f2      	bcc.n	8006816 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006830:	e000      	b.n	8006834 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006832:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d055      	beq.n	80068e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800683a:	f3ef 8311 	mrs	r3, BASEPRI
 800683e:	f04f 0120 	mov.w	r1, #32
 8006842:	f381 8811 	msr	BASEPRI, r1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	482f      	ldr	r0, [pc, #188]	; (8006908 <SEGGER_SYSVIEW_SendModule+0x110>)
 800684a:	f7fe fe89 	bl	8005560 <_PreparePacket>
 800684e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	e00b      	b.n	8006876 <SEGGER_SYSVIEW_SendModule+0x7e>
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	6279      	str	r1, [r7, #36]	; 0x24
 8006868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	09db      	lsrs	r3, r3, #7
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	2b7f      	cmp	r3, #127	; 0x7f
 800687a:	d8f0      	bhi.n	800685e <SEGGER_SYSVIEW_SendModule+0x66>
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	627a      	str	r2, [r7, #36]	; 0x24
 8006882:	6a3a      	ldr	r2, [r7, #32]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	61f9      	str	r1, [r7, #28]
 80068a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	61fa      	str	r2, [r7, #28]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2280      	movs	r2, #128	; 0x80
 80068cc:	4619      	mov	r1, r3
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7fe fe16 	bl	8005500 <_EncodeStr>
 80068d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068d6:	2216      	movs	r2, #22
 80068d8:	68f9      	ldr	r1, [r7, #12]
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f7fe ff2c 	bl	8005738 <_SendPacket>
      RECORD_END();
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <SEGGER_SYSVIEW_SendModule+0x102>
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4798      	blx	r3
    }
  }
}
 80068fa:	bf00      	nop
 80068fc:	3730      	adds	r7, #48	; 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2001440c 	.word	0x2001440c
 8006908:	20014414 	.word	0x20014414

0800690c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00f      	beq.n	800693a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f2      	bne.n	8006920 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	2001440c 	.word	0x2001440c

08006948 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800694e:	f3ef 8311 	mrs	r3, BASEPRI
 8006952:	f04f 0120 	mov.w	r1, #32
 8006956:	f381 8811 	msr	BASEPRI, r1
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	4817      	ldr	r0, [pc, #92]	; (80069bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800695e:	f7fe fdff 	bl	8005560 <_PreparePacket>
 8006962:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e00b      	b.n	800698c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	6179      	str	r1, [r7, #20]
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	617a      	str	r2, [r7, #20]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80069a2:	221b      	movs	r2, #27
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f7fe fec6 	bl	8005738 <_SendPacket>
  RECORD_END();
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f383 8811 	msr	BASEPRI, r3
}
 80069b2:	bf00      	nop
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20014414 	.word	0x20014414
 80069c0:	20014410 	.word	0x20014410

080069c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08a      	sub	sp, #40	; 0x28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069cc:	f3ef 8311 	mrs	r3, BASEPRI
 80069d0:	f04f 0120 	mov.w	r1, #32
 80069d4:	f381 8811 	msr	BASEPRI, r1
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	4827      	ldr	r0, [pc, #156]	; (8006a78 <SEGGER_SYSVIEW_Warn+0xb4>)
 80069dc:	f7fe fdc0 	bl	8005560 <_PreparePacket>
 80069e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e2:	2280      	movs	r2, #128	; 0x80
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6938      	ldr	r0, [r7, #16]
 80069e8:	f7fe fd8a 	bl	8005500 <_EncodeStr>
 80069ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
 80069f2:	2301      	movs	r3, #1
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	e00b      	b.n	8006a10 <SEGGER_SYSVIEW_Warn+0x4c>
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	6279      	str	r1, [r7, #36]	; 0x24
 8006a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	09db      	lsrs	r3, r3, #7
 8006a0e:	623b      	str	r3, [r7, #32]
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	2b7f      	cmp	r3, #127	; 0x7f
 8006a14:	d8f0      	bhi.n	80069f8 <SEGGER_SYSVIEW_Warn+0x34>
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e00b      	b.n	8006a48 <SEGGER_SYSVIEW_Warn+0x84>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	61f9      	str	r1, [r7, #28]
 8006a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	09db      	lsrs	r3, r3, #7
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4c:	d8f0      	bhi.n	8006a30 <SEGGER_SYSVIEW_Warn+0x6c>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	61fa      	str	r2, [r7, #28]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a5e:	221a      	movs	r2, #26
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	6938      	ldr	r0, [r7, #16]
 8006a64:	f7fe fe68 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
}
 8006a6e:	bf00      	nop
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20014414 	.word	0x20014414

08006a7c <memcmp>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	3901      	subs	r1, #1
 8006a80:	4402      	add	r2, r0
 8006a82:	4290      	cmp	r0, r2
 8006a84:	d101      	bne.n	8006a8a <memcmp+0xe>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e005      	b.n	8006a96 <memcmp+0x1a>
 8006a8a:	7803      	ldrb	r3, [r0, #0]
 8006a8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d001      	beq.n	8006a98 <memcmp+0x1c>
 8006a94:	1b18      	subs	r0, r3, r4
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	3001      	adds	r0, #1
 8006a9a:	e7f2      	b.n	8006a82 <memcmp+0x6>

08006a9c <memset>:
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d100      	bne.n	8006aa6 <memset+0xa>
 8006aa4:	4770      	bx	lr
 8006aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aaa:	e7f9      	b.n	8006aa0 <memset+0x4>

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4d0d      	ldr	r5, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1b64      	subs	r4, r4, r5
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	42a6      	cmp	r6, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4d0b      	ldr	r5, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 f826 	bl	8006b10 <_init>
 8006ac4:	1b64      	subs	r4, r4, r5
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2600      	movs	r6, #0
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad4:	4798      	blx	r3
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ade:	4798      	blx	r3
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	08006c7c 	.word	0x08006c7c
 8006ae8:	08006c7c 	.word	0x08006c7c
 8006aec:	08006c7c 	.word	0x08006c7c
 8006af0:	08006c80 	.word	0x08006c80

08006af4 <memcpy>:
 8006af4:	440a      	add	r2, r1
 8006af6:	4291      	cmp	r1, r2
 8006af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006afc:	d100      	bne.n	8006b00 <memcpy+0xc>
 8006afe:	4770      	bx	lr
 8006b00:	b510      	push	{r4, lr}
 8006b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	d1f9      	bne.n	8006b02 <memcpy+0xe>
 8006b0e:	bd10      	pop	{r4, pc}

08006b10 <_init>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr

08006b1c <_fini>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr
